---

# File: vars/global.yml

# Legacy DIMS directory path variables.
# These complement the Fedora model set above. Be aware of
# the existence of both sets when choosing to use (or add)
# a variable to reference a location.
# TODO(dittrich): Replace this with one dictionary

dims: /opt/dims
dims_bin:        "{{ dims }}/bin"
dims_data:       "{{ dims }}/data"
dims_deploy:     "{{ dims }}/deploy"
dims_docs:       "{{ dims }}/docs"
dims_etc:        "{{ dims }}/etc"
dims_etc_bashrc: "{{ dims_etc }}/bashrc.dims.d"
dims_git:        "{{ dims }}/git"
dims_lib:        "{{ dims }}/lib"
dims_tests:      "{{ dims }}/tests.d"
dims_triggers:   "{{ dims }}/triggers.d"
dims_logmon:     "{{ dims_data }}/logmon"
dims_src:        "{{ dims }}/src"

# dims_desktop_dirs = [ a,b,c,d ]
#
# Server directories
# dims_server_dirs = [ a,b,c,d,s ]
dims_srv:     "{{ dims }}/srv"
#
# Create a dims_dirs array with the above...
# Note: Hasn't been broken out into desktop/server yet
# Note: Make sure that the list of directories created here matches those
# being tested for in $GIT/dims-ci-utils/dims/test.dims-ci-utils.envcheck.

dims_dirs:
  - "{{ dims_bin }}"
  - "{{ dims_data }}"
  - "{{ dims_deploy }}"
  - "{{ dims_docs }}"
  - "{{ dims_etc }}"
  - "{{ dims_etc_bashrc }}"
  - "{{ dims_git }}"
  - "{{ dims_lib }}"
  - "{{ dims_tests }}"
  - "{{ dims_triggers }}"
  - "{{ dims_logmon }}"
  - "{{ dims_src }}"
  - "{{ dims_srv }}"

# Fedora project uses absolute paths. That works using a control host that is
# separate from a development host (which the DIMS project developers were
# doing.) The latter involves unique paths derived from $HOME (or including
# different path components with the users' names, which makes things more
# complicated in shared code, or with the way we create Vagrants.
#basedir: /srv/web/infra/ansible
basedir: "{{ playbooks_root | default(lookup('env', 'PBR')) }}"
# The private directory is handled differently than other DIMS directories.
private: "{{ dims }}/private"
bigfiles: "{{ basedir }}/bigfiles"
files: "{{ basedir }}/files"
roles_path: "{{ basedir }}/roles"
handlers_path: "{{ basedir }}/handlers"
tasks_path: "{{ basedir }}/tasks"
vars_path: "{{ basedir }}/vars"
patches: "{{ basedir }}/files/patches"
imported_roles:  "{{ dims_etc }}/ansible_roles"
imported_plugins: "{{ dims_etc }}/ansible_plugins"

vm: "/vm"
dist_tag: unknown

# These are global variables that are defined here for one
# of two reasons: (1) To provide an undefined variable that
# exists (to allow templating to not fail), or (2) to provide
# an truly global variable that applies to any DIMS instance
# (regardless of who/what/where/when/why it exists: in other
# words, these varialbes should have NO specificity at all.)
#

# Use this variable for checking for existence of an undefined
# variable. (Differences in the way "undefined" is defined
# can cause problems due to coupling of the value to the concept
# of "undefined", which can vary from programmer to programmer.)

UNDEFINED: "__UNDEFINED__"

# Variables for testing and/or illustrating vars layering.
test_undefined: '{{ UNDEFINED }}'
test_color: 'gray'

# "Serving zones" for dns
zones: []

# The following is managed using "bumpversion". See the
# dims-ci-utils documentation.

ansibleplaybooks_version: "3.2.2"


# Put these here for now to allow Jenkins build jobs to work.
verbose: false
debug: false
nolog: true

#-- END FROM vars/global.yml --#

# Set a default hostname base to transient. Override in host vars or command line.
hostbase: transient

# dnsDynamic: False by default; actually set at deployment level (or below)
dnsDynamic: False

# TODO(dittrich): WIP
# This array will be used to list physical hardware names.
hardware_assets: []

# Override on the command line to remove dims_tests dir with '-e dims_inititalize_tests=true'
dims_initialize_tests: false

# To calculate permissions masks or symbolic representations of same,
# you can use http://permissions-calculator.org/symbolic/

# Jenkins variables
build_user: jenkins
# Relative path from ansible-playbooks location in jenkins job workspace to the
# root of the workspace. Will work in any workspace as long as ansible-playbooks
# is cloned to the workspace in the job. Used to obtain an artifact from the
# current jenkins workspace
jenkins_relative_artifact_dir: ".."
# Default value for whether or not to obtain Jenkins-built artifacts via http rather
# than from the file system.
use_http: true
# "dev" for deploying artifacts created from "dev" branch of a repo, "prod" for
# deploying artifacts created from "master" branch of a repo.
# Used to construct a URL to obtain the artifact.
deploy_type: dev

jenkins_url: http://jenkins.prisem.washington.edu
jenkins_jobs_dir: /var/lib/jenkins/jobs
git_origin: git@git.prisem.washington.edu:/opt/git

# Supervisor variables.
dims_supervisord_conf: '/etc/supervisor/supervisord.conf'

# Ansible variables.
dims_remote_user: ansible

# SSHFS configuration variables
sshfs_cfg_path: gituser@git.prisem.washington.edu:cfg
cfg_path: dims/cfg

#-- END FROM vars/global.yml --#


# The following is for testing and validation of where this
# variable gets (re)defined.
was_defined_in: 'vars/global.yml'

# vim: ft=ansible :
