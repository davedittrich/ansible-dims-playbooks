#!/bin/sh
#
# {{ ansible_managed }} [ansible-playbooks v{{ ansibleplaybooks_version }}
#
set -e

### BEGIN INIT INFO
# Provides:           vault
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Should-Start:       cgroupfs-mount cgroup-lite
# Should-Stop:        cgroupfs-mount cgroup-lite
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Hashicorp vault init script
# Description:
#  Hashicorp vault is s secret management service.
#  See https://www.vaultproject.io/
#
### END INIT INFO

# This script is based on the /etc/init.d/docker startup script
# for Ubuntu 14.04.

export PATH={{ dims_global_path }}

BASE=vault

# modify these in /etc/default/$BASE (/etc/default/vault)
VAULTD=/opt/dims/bin/${BASE}.run
# This is the pid file managed by vault itself
VAULT_PIDFILE=/var/run/$BASE.pid
# This is the pid file created/managed by start-stop-daemon
VAULT_SSD_PIDFILE=/var/run/$BASE-ssd.pid
VAULT_LOGFILE=/var/log/$BASE.log
VAULT_OPTS=
VAULT_DESC="Vault"

# Get lsb functions
. /lib/lsb/init-functions

if [ -f /etc/default/$BASE ]; then
	. /etc/default/$BASE
fi

# Check vault is present
if [ ! -x $VAULTD ]; then
	log_failure_msg "$VAULTD not present or not executable"
	exit 1
fi

check_init() {
	 # see also init_is_upstart in /lib/lsb/init-functions (which isn't available in Ubuntu 12.04, or we'd use it directly)
	 if [ -x /sbin/initctl ] && /sbin/initctl version 2>/dev/null | grep -q upstart; then        
                log_failure_msg "$VAULT_DESC is managed via upstart, try using service $BASE $1"
                exit 1
         fi
}

fail_unless_root() {
	if [ "$(id -u)" != '0' ]; then
		log_failure_msg "$VAULT_DESC must be run as root"
		exit 1
	fi
}

cgroupfs_mount() {
	# see also https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount
	if grep -v '^#' /etc/fstab | grep -q cgroup \
		|| [ ! -e /proc/cgroups ] \
		|| [ ! -d /sys/fs/cgroup ]; then
		return
	fi
	if ! mountpoint -q /sys/fs/cgroup; then
		mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
	fi
	(
		cd /sys/fs/cgroup
		for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
			mkdir -p $sys
			if ! mountpoint -q $sys; then
				if ! mount -n -t cgroup -o $sys cgroup $sys; then
					rmdir $sys || true
				fi
			fi
		done
	)
}

case "$1" in
	start)
		check_init
		
		fail_unless_root

		cgroupfs_mount

		touch "$VAULT_LOGFILE"
		chgrp vault "$VAULT_LOGFILE"

		ulimit -n 1048576
		if [ "$BASH" ]; then
			ulimit -u 1048576
		else
			ulimit -p 1048576
		fi

		log_begin_msg "Starting $VAULT_DESC: $BASE"
		start-stop-daemon --start --background \
			--no-close \
			--exec "$VAULTD" \
			--pidfile "$VAULT_SSD_PIDFILE" \
			--make-pidfile \
			-- \
				-p "$VAULT_PIDFILE" \
				$VAULT_OPTS \
					>> "$VAULT_LOGFILE" 2>&1
		log_end_msg $?
		;;

	stop)
		check_init
		fail_unless_root
		log_begin_msg "Stopping $VAULT_DESC: $BASE"
		start-stop-daemon --stop --pidfile "$VAULT_SSD_PIDFILE" --retry 10
		log_end_msg $?
		;;

	restart)
		check_init
		fail_unless_root
		vault_pid=`cat "$VAULT_SSD_PIDFILE" 2>/dev/null`
		[ -n "$vault_pid" ] \
			&& ps -p $vault_pid > /dev/null 2>&1 \
			&& $0 stop
		$0 start
		;;

	force-reload)
		check_init
		fail_unless_root
		$0 restart
		;;

	status)
		check_init
		status_of_proc -p "$VAULT_SSD_PIDFILE" "$VAULT" "$VAULT_DESC"
		;;

	*)
		echo "Usage: service vault {start|stop|restart|status}"
		exit 1
		;;
esac
