---

# File: roles/jenkins2/tasks/main.yml

# The role 'geerlingguy/ansible-role-jenkins' is being used to
# install Jenkins. It requires Java8, so the role 'java8' from
# this repo is required as a pre-requisite. This role is then used
# to configure Jenkins jobs install bats test scripts that
# conform with DIMS project requirements.
#
# This would be better done with a single role that uses
# a mechanism like "include_role", but as of Ansible 2.3.0.0,
# there are still bugs that prevent handlers from executing
# properly that make this not possible.

- name: Assert supported Debian version
  assert:
    that:
      ansible_lsb.id == "Debian" and ansible_lsb.codename in [ "jessie" ]
  tags: [ always ]

- name: Define jenkins_cli command
  set_fact:
    jenkins_cli: 'ssh -p {{ jenkins_ssh_port }} -l {{ jenkins_admin_username }} {{ jenkins_hostname }}'
  when: jenkins_cli is not defined
  tags: [ always ]

- name: Define jenkins_fqdn
  set_fact:
    jenkins_fqdn: '{{ dims_fqdn }}'
  when: jenkins_fqdn is not defined
  tags: [ always ]

- name: Define jenkins_context_path
  set_fact:
    jenkins_context_path: ''
  when: jenkins_context_path is not defined
  tags: [ always ]

- name: Show jenkins_cli setting
  debug: 'var=jenkins_cli'
  when: jenkins_cli is defined
  tags: [ jenkins2, jenkins2jobs ]

- name: Define _jenkins_cli_uses_ssh
  set_fact:
    _jenkins_cli_uses_ssh: '{{ jenkins_cli.find("ssh") != -1 }}'
  tags: [ jenkins2, jenkins2jobs ]

- name: Define _jobs_configs directory path
  set_fact:
    _jobs_configs: '{{ jenkins_home }}/jobs_configs'
  tags: [ jenkins2, jenkins2jobs ]

- name: Define jenkins_ansible_ssh_private_key_file
  set_fact:
    jenkins_ansible_ssh_private_key_file: '{{ ansible_private_key_file }}'
  when: jenkins_ansible_ssh_private_key_file is not defined
  tags: [ always ]

- name: Stat jenkins_ansible_ssh_private_key_file
  stat:
    path: '{{ jenkins_ansible_ssh_private_key_file }}'
  delegate_to: '127.0.0.1'
  become: no
  register: _privkeystat
  tags: [ always ]

- name: Stat jenkins_ansible_ssh_private_key_file + .pub
  stat:
    path: '{{ jenkins_ansible_ssh_private_key_file }}.pub'
  delegate_to: '127.0.0.1'
  become: no
  register: _pubkeystat
  tags: [ always ]

- name: Assert private and public keys exist
  assert:
    that:
      - _privkeystat.stat.exists
      - _pubkeystat.stat.exists
  tags: [ always ]

- name: Assert jenkins_admin_password is defined and not null
  assert:
    that:
      - jenkins_admin_password is defined
      - jenkins_admin_password != ''
  tags: [ always ]

- import_tasks: '{{ tasks_path }}/pre_tasks.yml'
  tags: [ jenkins2, jenkins2jobs, packages ]

- name: Run system test for required Java8 installation
  command: '{{ dims_bin }}/test.runner --tap --level system --match java8-install'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  tags: [ jenkins2 ]

- name: Make backports present for APT on Debian
  apt_repository:
    repo: 'deb http://ftp.debian.org/debian {{ item }} main'
    state: present
    update_cache: yes
  with_items:
    - '{{ ansible_lsb.codename }}-backports'
    - '{{ ansible_lsb.codename }}'
  tags: [ jenkins2, packages ]

- name: Get golang-go backports version
  shell: apt-cache policy golang-go | grep {{ ansible_lsb.codename }}-backports -B1 | head -n1 | sed -e 's/^\s*\**\s*\(\S*\).*/\1/'
  register: _golanginstalled
  tags: [ jenkins2, packages ]

- name: Install golang-go from backports
  apt:
    name: '{{ item }}={{ _golanginstalled.stdout_lines[0] }}'
    state: present
    default_release: '{{ ansible_lsb.codename }}-backports'
    force: yes
  with_items:
    - golang-src
    - golang-go
  tags: [ jenkins2, packages ]

- name: Ensure Debian go development prerequisites are present
  apt:
    name: '{{ item }}'
    state: present
    default_release: '{{ ansible_lsb.codename }}-backports'
    force: yes
  with_items:
    - dh-golang
    - dh-systemd
  become: yes
  tags: [ jenkins2, packages ]

## We want to pin the version of Jenkins for stability
## reasons.

- name: Hold updates of jenkins package
  dpkg_selections:
    name: '{{ item }}'
    selection: hold
  with_items:
    - jenkins
    - golang-go
    - golang-src
  become: yes
  tags: [ jenkins2, packages ]

- name: Ensure ansible user is in jenkins group
  user:
    name: ansible
    append: yes
    groups: jenkins
  become: yes
  when: "groups['ci-server'] is defined and inventory_hostname in groups['ci-server']"
  tags: [ jenkins2 ]

- name: Make Jenkins nginx front end present
  template:
    src: '{{ item }}'
    dest: /etc/nginx/sites-available/jenkins
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ nginx_confd_jenkins }}'
       - jenkins.{{ inventory_hostname }}.j2
       - jenkins.category-{{ category }}.j2
       - jenkins.deployment-{{ deployment }}.j2
       - jenkins.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/nginx/'
       - nginx/
  become: yes
  notify: restart nginx
  tags: [ jenkins2, config ]

- name: Create symlink to enable site
  file:
    src: '/etc/nginx/sites-available/{{ item }}'
    dest: '/etc/nginx/sites-enabled/{{ item }}'
    state: link
  with_items:
    - jenkins
  notify: restart nginx
  tags: [ jenkins2, config ]

- name: Ensure custom Jenkins configurations are present
  template:
    src: '{{ item }}'
    dest: '{{ jenkins_home }}/{{ item|basename|regex_replace(".j2","") }}'
    owner: '{{ root_user }}'
    group: 'jenkins'
    mode: 0o640
  with_fileglob:
    - "{{ dims_private }}/roles/{{ role_name }}/templates/config/*.j2"
    - "../templates/config/*.j2"
  become: yes
  notify: restart jenkins
  tags: [ jenkins2, config ]

  # Use the cli_config.yml task file from https://github.com/karlmdavis/ansible-jenkins2.git

- import_tasks: 'cli_config.yml'
  tags: [ jenkins2 ]

- name: Get plugin version numbers
  shell:
    chdir={{ jenkins_home }}
    grep -r Plugin-Version plugins | sed 's/\// /g' | awk '{ print $2, $5; }'
  become: yes
  register: _plugin_out
  tags: [ jenkins2 ]

- name: Save plugin version numbers in dictionary
  set_fact:
    jenkins_plugin_versions: "{{ jenkins_plugin_versions|default({}) | combine( {item.split(' ')[0]: item.split(' ')[1]} ) }}"
  with_items: "{{ _plugin_out.stdout_lines }}"
  tags: [ jenkins2 ]

- debug: 'var=jenkins_plugin_versions'
  tags: [ jenkins2 ]

- name: Ensure members of jenkins group can read secrets
  file:
    path: '{{ jenkins_home }}/secrets'
    state: directory
    owner: '{{ jenkins_process_user }}'
    group: '{{ jenkins_process_user }}'
    mode: 0o770
  become: yes
  notify: restart nginx
  tags: [ jenkins2, config ]

- name: Ensure admin password is absent
  file:
    path: '{{ jenkins_home }}/secrets/AdminPassword'
    state: absent
  become: yes
  tags: [ jenkins2, config ]

- name: Ensure public keys in jenkins authorized_keys
  authorized_key:
    user: jenkins
    state: present
    key: '{{ item }}'
  with_items:
      - '{{ lookup("file", jenkins_ansible_ssh_private_key_file + ".pub") }}'
      - '{{ jenkins_authorized_keys|default([]) }}'
  become: yes
  tags: [ jenkins2 ]

- name: Ensure root account prepared for known_hosts file
  file:
    path: '/root/.ssh'
    state: directory
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o700
  become: yes
  tags: [ jenkins2 ]

- name: Ensure host key is in known_hosts files
  shell: >
    (ssh-keyscan -p {{ jenkins_ssh_port }} localhost 2>/dev/null;
    [ -f ~/.ssh/known_hosts ] && cat ~{{ item }}/.ssh/known_hosts) |
    sort | uniq > ~{{ item }}/.ssh/known_hosts
  become: yes
  become_user: '{{ item }}'
  with_items:
    - jenkins
    - ansible
    - git
    - root
  when: item in ansible_accounts
  ignore_errors: true
  tags: [ jenkins2 ]

- name: Ensure jenkins user is in desired groups
  user:
    name: jenkins
    append: yes
    groups: '{{ jenkins_groups }}'
  become: yes
  notify: restart nginx
  tags: [ jenkins2, config ]

- name: Ensure (templated) scripts are present
  template:
    src: '{{ item }}'
    dest: '{{ dims_bin }}/{{ item | basename | regex_replace("\.j2$","") }}'
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o755
  # with_fileglob relative paths rooted at {{ role_name }}/files directory
  with_fileglob:
    - "../templates/scripts/*.j2"
  tags: [ jenkins2, jenkins2jobs, scripts ]

  # TODO(dittrich): Use find, set_fact, then with_items

- name: Ensure (non-templated) scripts are present
  copy:
    src: '{{ item }}'
    dest: '{{ dims_bin }}/{{ item | basename | regex_replace("\.sh$","") }}'
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o755
  # with_fileglob relative paths rooted at {{ role_name }}/files directory
  with_fileglob:
    - "scripts/*.sh"
  tags: [ jenkins2, jenkins2jobs, scripts ]

- name: Ensure jobs_configs directory is present
  file:
    path: '{{ _jobs_configs }}'
    state: directory
    owner: 'jenkins'
    group: 'jenkins'
    mode: 0o750
  tags: [ jenkins2, jenkins2jobs ]

- name: Ensure non-templated jobs are present
  copy:
    src: '{{ item }}'
    dest: '{{ _jobs_configs }}/{{ item|basename }}'
    owner: 'jenkins'
    group: 'jenkins'
    mode: 0o640
  become: yes
  with_fileglob:
    - "jobs/*.xml"
  register: _jobsfiles_not_templated
  tags: [ jenkins2, jenkins2jobs ]

- debug: 'var=_jobsfiles_not_templated'
  tags: [ jenkins2, jenkins2jobs ]

- name: Ensure templated jobs are present
  template:
    src: '{{ item }}'
    dest: '{{ _jobs_configs }}/{{ item|basename|regex_replace(".j2$","") }}'
    owner: 'jenkins'
    group: 'jenkins'
    mode: 0o640
  become: yes
  with_fileglob:
    - "../templates/jobs/*.xml.j2"
  register: _jobsfiles_templated
  tags: [ jenkins2, jenkins2jobs ]

- debug: 'var=_jobsfiles_templated'
  tags: [ jenkins2, jenkis2jobs ]

- name: Find jobs files
  find:
    path: '{{ _jobs_configs }}'
    file_type: file
    patterns: "*.xml"
    use_regex: false
    recurse: false
  register: _find
  tags: [ jenkins2, jenkins2jobs ]

- name: Record job (base file name)
  set_fact:
    _jobsfiles: '{{ _jobsfiles|default([]) + [item|basename|regex_replace("\.xml","")] }}'
  with_items: '{{ _find.files|map(attribute="path")|list }}'
  tags: [ jenkins2, jenkins2jobs ]

- debug: 'var=_jobsfiles'
  when: _jobsfiles is defined
  tags: [ jenkins2, jenkins2jobs ]

  # SEE: http://stackoverflow.com/a/9954283/100134
  # Uses same "-s" option content as ansible-jenkins2/tasks/plugins.yml
  # SEE ALSO: https://issues.jenkins-ci.org/browse/JENKINS-38318

- name: Get 'list-jobs' from jenkins CLI
  shell: "{{ jenkins_cli }} list-jobs"
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  become: yes
  become_user: jenkins
  register: _list_jobs
  tags: [ jenkins2, jenkins2jobs ]

- name: Record installed jobs
  set_fact:
    _installed_jobs: '{{ _installed_jobs|default([]) + [ item ] }}'
  with_items: '{{ _list_jobs.stdout_lines }}'
  when: _list_jobs is defined and _list_jobs.stdout_lines|length > 0
  tags: [ jenkins2, jenkins2jobs ]

- name: Record no installed jobs
  set_fact:
    _installed_jobs: []
  when: _list_jobs is not defined or _list_jobs.stdout_lines|length == 0
  tags: [ jenkins2, jenkins2jobs ]

- name: Create new Jenkins jobs
  shell: >
    {{ jenkins_cli }} create-job '{{ item }}'
    < '{{ _jobs_configs }}/{{ item }}.xml'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  become: yes
  become_user: jenkins
  register: _create
  changed_when: "_create.stdout and 'already exists' not in _create.stdout"
  failed_when: "_create.stderr and 'already exists' not in _create.stderr"
  with_items:
    - "{{ _jobsfiles }}"
  when: _jobsfiles is defined and item not in _installed_jobs
  notify: restart jenkins
  tags: [ jenkins2, jenkins2jobs ]

- name: Update existing Jenkins jobs
  shell: >
    {{ jenkins_cli }} update-job '{{ item }}'
    < '{{ _jobs_configs }}/{{ item }}.xml'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  become: yes
  become_user: jenkins
  register: _update
  changed_when: "_update.stdout and 'already exists' not in _update.stdout"
  failed_when: "_update.stderr and 'already exists' not in _update.stderr"
  with_items:
    - "{{ _jobsfiles }}"
  when: _jobsfiles is defined and item in _installed_jobs
  notify: restart jenkins
  tags: [ jenkins2, jenkins2jobs ]

- name: Restart Jenkins again to take on group memberhips
  service:
    name: jenkins
    state: restarted
  become: yes
  tags: [ jenkins2, jenkins2jobs ]

- name: Wait for Jenkins to start up before proceeding.
  shell: >
    curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: no
  tags: [ jenkins2, jenkins2jobs ]

- name: Validate installation using installed jenkins.cli script
  shell: '{{ dims_bin }}/jenkins.cli build install-test'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  become: yes
  become_user: jenkins
  tags: [ jenkins2, jenkins2jobs ]

- name: Run bootstrap jobs when defined
  shell: '{{ dims_bin }}/jenkins.cli "{{ item }}"'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  with_items:
    - '{{ jenkins_bootstrap_jobs }}'
  when: jenkins_bootstrap_jobs is defined
  become: yes
  become_user: jenkins
  tags: [ jenkins2, jenkins2jobs ]

- import_tasks: "{{ tasks_path }}/post_tasks.yml"
  tags: [ jenkins2, jenkins2jobs, packages ]

# vim: ft=ansible :
