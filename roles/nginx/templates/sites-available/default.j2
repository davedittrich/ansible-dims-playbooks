# {{ ansible_managed }} [ansible-playbooks v{{ ansibleplaybooks_version }}]

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Redirect all HTTP (80) traffic to HTTPS (443)
# Trident should only be exposed over HTTPS, other
# HTTP services should be proxied over HTTPS.
server {
  listen 80 default_server;
  #listen [::]:80 default_server ipv6only=on;
  server_name _;
  return 301 https://$host$request_uri;
}

# HTTPS server
#
server {
  listen 443 ssl;
  #listen [::]:443 ssl;
  server_name _;

  root /var/www;
  index index.html index.htm;

{% if use_letsencrypt is defined and use_letsencrypt %}
  # https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04
  ssl_certificate     /etc/letsencrypt/live/{{ certbot_sitename }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ certbot_sitename }}/privkey.pem;
{% else %}
  ssl_certificate   {{ ssl_certfile }};
  ssl_certificate_key {{ ssl_keyfile }};
{% endif %}

  # TLS configuration: https://cipherli.st/
  ssl_protocols TLSv1.2 TLSv1.3;# Requires nginx >= 1.13.0 else use TLSv1.2
  ssl_prefer_server_ciphers on;
  ssl_dhparam {{ ssl_dhparam_file }}; # openssl dhparam -out /etc/nginx/dhparam.pem 4096
  # https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html#toc_1
  ssl_ciphers EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;
  ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
  ssl_session_timeout  10m;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off; # Requires nginx >= 1.5.9
  ssl_stapling on; # Requires nginx >= 1.3.7
  ssl_stapling_verify on; # Requires nginx => 1.3.7
  # resolver $DNS-IP-1 $DNS-IP-2 valid=300s;
  resolver_timeout 5s;
  # STS header
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
  add_header Strict-Transport-Security "max-age=31536001";
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
{% if sslSPKIFingerprint is defined %}
  # HTTP Key Pinning
  add_header Public-Key-Pins 'max-age=5184000; pin-sha256"={{ sslSPKIFingerprint }}"';
{% endif %}

  # TODO(dittrich): Figure out HPKP pinning with certbot
  # https://scotthelme.co.uk/setting-up-le/

  location ~ /.well-known {
       allow all;
  }

  location /health_check {
    proxy_pass http://127.0.0.1:{{ nginx_health_check_port }};
  }

{% if nginx_locations is defined %}
  {%- for _location, _context in nginx_locations.items() %}
  location {{ _location }} {
    {{ _context }}
  }
  {% endfor %}
{% endif -%}

  location / {
    try_files $uri $uri/ =404;
  }

}
