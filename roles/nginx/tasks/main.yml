---

# File: roles/nginx/tasks/main.yml

- name: Define nginx_source_dir
  set_fact:
     nginx_source_dir: '/opt/dims/source'
  when: nginx_source_dir is not defined
        and '"source" in nginx_locations'
  tags: [ always ]

- import_tasks: '{{ tasks_path }}/pre_tasks.yml'
  tags: [ nginx, packages, config ]

# Letsencrypt support
- import_tasks: '{{ tasks_path }}/install-certbot-auto.yml'
  when: use_letsencrypt is defined and use_letsencrypt|bool
  tags: [ nginx, packages ]

- name: Stat letsencrypt_tls_keyfile
  stat:
    path: '{{ letsencrypt_tls_keyfile }}'
  register: _keyfile_stat
  tags: [ nginx, packages ]

- import_tasks: '{{ tasks_path }}/install-certbot-certs.yml'
  when: not _keyfile_stat.stat.exists and
        use_letsencrypt is defined and
        use_letsencrypt|bool
  tags: [ nginx, packages ]

# Following instructions from http://nginx.org/en/linux_packages.html
- name: Import repository signing key (apt)
  apt_key:
    id: ABF5BD827BD9BF62
    url: http://nginx.org/keys/nginx_signing.key
    state: present
  become: yes
  when: ansible_pkg_mgr == "apt"
  tags: [ nginx, packages ]

- name: Make deb sources present (apt)
  apt_repository:
    repo: '{{ item }}'
    state: present
    update_cache: yes
  with_items:
    - deb http://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_lsb.codename }} nginx
    - deb-src http://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_lsb.codename }} nginx
  become: yes
  when: ansible_pkg_mgr == "apt"
  tags: [ nginx, packages ]

- name: Only "update_cache=yes" if >3600s since last update
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_pkg_mgr == "apt"
  become: yes
  tags: [ nginx, packages ]

- name: Ensure RPM signing key is present (yum)
  rpm_key:
    state: present
    key: https://nginx.org/keys/nginx_signing.key
  when: ansible_pkg_mgr == "yum"
  become: yes
  tags: [ nginx, packages ]

- name: Ensure RPM repo is present (yum)
  template:
    src: 'nginx.repo.j2'
    dest: '/etc/yum.repos.d/nginx.repo'
  when: ansible_pkg_mgr == "yum"
  become: yes
  tags: [ nginx, packages ]

- name: Make Nginx present (apt)
  apt:
    name: nginx
    state: present
    dpkg_options: 'force-confold,force-confdef'
  when: ansible_pkg_mgr == "apt"
  become: yes
  notify:
    - 'restart nginx'
  tags: [ nginx, packages ]

- name: Make Nginx present (yum)
  yum:
    name: nginx
    state: present
  become: yes
  when: ansible_pkg_mgr == "yum"
  notify:
    - 'restart nginx'
  tags: [ nginx, packages ]

- name: Ensure www-data user+group is present
  user:
    name: 'www-data'
    state: present
    shell: '/bin/true'
    group: 'www-data'
    groups: 'ssl-cert'
  become: yes
  tags: [ nginx, packages ]

- name: Ensure nginx sites directories exist
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o755
  with_items:
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled
  become: yes
  tags: [ nginx, config ]

# https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04
- name: Generate strong Diffie-Hellman group
  shell: 'openssl dhparam -out {{ ssl_dhparam_file }} {{ ssl_dhparam_keysize }}'
  args:
    creates: '{{ ssl_dhparam_file }}'
  become: yes
  tags: [ nginx, config ]

- name: Configure Nginx
  template:
    src: '{{ item }}'
    dest: /etc/nginx/nginx.conf
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
        - '{{ nginx_conf }}'
        - nginx.conf.{{ inventory_hostname }}.j2
        - nginx.conf.deployment-{{ deployment }}.j2
        - nginx.conf.j2
      paths:
        - '{{ dims_private }}/roles/{{ role_name }}/templates/nginx/'
        - nginx/
  become: yes
  notify:
    - 'restart nginx'
  tags: [ nginx, config ]

- name: Validate nginx configuration
  shell: 'nginx -t'
  register: nginx_t
  become: yes
  tags: [ nginx, config ]

- name: Debug nginx_t.stderr_lines
  debug:
    var: nginx_t.stderr_lines
  when: nginx_t.stderr is not search('syntax is ok')
  tags: [ nginx, config ]

- name: Fail if syntax not ok
  fail:
    var: '{{ nginx_t.stderr_lines }}'
  when: nginx_t.stderr is not search('syntax is ok')
  tags: [ nginx, config ]

- name: Ensure nginx is enabled
  service:
    name: nginx
    enabled: yes
  become: yes
  tags: [ nginx, packages ]

- name: Define nginx_sites_available variable
  set_fact:
    nginx_sites_available: '{{ _nginx_sites_available }}'
  when: nginx_sites_available is not defined
  tags: [ nginx, config ]

- name: Debug nginx_sites_available
  debug:
    var: nginx_sites_available
  tags: [ nginx, config ]

  # Ansible does not support nested loops of with_items
  # wrapping with_first_found. We are using with_first_found
  # to enable generalization of templates across groups,
  # and we want to use an array of sites_available and
  # sites_enabled. This requires looping using with_items
  # to include a task that then performs the with_first_found.
  # This only works with Ansible >2.1 and its dynamic
  # inclusion behavior.
- block:
  - name: Install sites from nginx_sites_available
    include_tasks: 'install-site-available.yml'
    with_items:
      - '{{ nginx_sites_enabled }}'
    loop_control:
      loop_var: _sitename
  become: yes
  when:
    - nginx_sites_available is defined
    - nginx_sites_enabled is defined
  tags: [ nginx, config ]

- name: Define nginx_sites_enabled variable
  set_fact:
    nginx_sites_enabled: '{{ nginx_sites_enabled|default(_nginx_sites_enabled) }}'
  tags: [ nginx, config ]

- name: Create symlinks to nginx_sites_enabled
  file:
    src: '/etc/nginx/sites-available/{{ item }}'
    dest: '/etc/nginx/sites-enabled/{{ item }}'
    state: link
  with_items:
    - '{{ nginx_sites_enabled }}'
  become: yes
  ignore_errors: yes
  notify:
    - 'restart nginx'
  tags: [ nginx, config ]

- name: Create health_check directory if selected
  file:
    path: '/var/www/health_check'
    state: directory
    owner: '{{ dims_user }}'
    group: '{{ dims_group }}'
    mode: 0o755
  when: '"health_check" in nginx_sites_available'
  become: yes
  tags: [ nginx, config ]

- name: Set up health_check site if selected
  template:
    src: '{{ item }}'
    dest: /var/www/health_check/index.html
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
        - '{{ nginx_index }}'
        - index.html.{{ inventory_hostname }}.j2
        - index.html.deployment-{{ deployment }}.j2
        - index.html.j2
      paths:
        - '{{ dims_private }}/roles/{{ role_name }}/templates/html/'
        - html/
  become: yes
  when: '"health_check" in nginx_sites_available'
  notify:
    - 'restart nginx'
  tags: [ nginx, config ]

- name: Make artifacts (source) directory present
  file:
    path: '{{ nginx_source_dir }}'
    state: directory
    owner: '{{ dims_user }}'
    group: www-data
    mode: 0o775
  become: yes
  when: nginx_source_dir is defined
  notify:
    - 'restart nginx'
  tags: [ nginx, config ]

  # We only need to worry about bootstrapping the source directory
  # to serve source when this is meant to be a source server. Duh.
- import_tasks: 'bootstrap-source.yml'
  when: (nginx_locations is defined and "source" in nginx_locations)
        and nginx_source_bootstrap_dir is defined
  tags: [ nginx ]

- import_tasks: '{{ tasks_path }}/post_tasks.yml'
  tags: [ nginx, packages, config ]

# vim: ft=ansible :
