---

# File: roles/dns/tasks/main.yml
#
# To create DNS zone information for serving
# from a VM host for internal DNS by Vagrants, do the
# following:
#
#  $ ansible-playbook -i $PBR/inventory \
#  > -e "{'host': 'localhost', 'role': 'dns', 'zones': ['local'], \
#  > 'deployment': 'local', 'vmhost_ip': '192.168.26.1'}" \
#  > --tags dnsfiles -c local \
#  > $PBR/playbooks/base_playbook.yml
#
# See also $PBR/playbooks/hosts/vmhost.devops.local.yml and related
# host_vars file for doing this more easily via a playbook.

# We are using Ansible 2 only features.
- include: "{{ tasks_path }}/ansible2check.yml"

- include: "{{ tasks_path }}/pre_tasks.yml"
  tags: [ dns, dnsfiles, packages, config ]

# Install dnsmasq consistently from source.
- include: "{{ tasks_path }}/dnsmasq.yml"
  tags: [ dns, packages, config ]

- name: Make sure additional user-supplied config directory exists
  file:
    state: directory
    path: "/etc/dnsmasq.d"
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ mode_0755 }}"
  become: yes
  tags: [ dns, dnsfiles, packages, config ]

- name: Update dnsmasq defaults on Debian
  template:
    src: '{{ item }}'
    dest: /etc/default/dnsmasq
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ dnsmasq_defaults }}'
        - dnsmasq.{{ ansible_fqdn }}.j2
        - dnsmasq.category-{{ category }}.j2
        - dnsmasq.deployment-{{ deployment }}.j2
        - dnsmasq.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/default/'
        - default/
  become: yes
  when: ansible_os_family == "Debian"
  notify:
    - restart dnsmasq
  tags: [ dns, config ]

- name: Make dnsmasq configuration file present on Debian
  template:
    src: '{{ item }}'
    dest: /etc/dnsmasq.conf
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ dnsmasq_conf }}'
        - dnsmasq.conf.{{ ansible_fqdn }}.j2
        - dnsmasq.conf.category-{{ category }}.j2
        - dnsmasq.conf.deployment-{{ deployment }}.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/dnsmasq.conf/'
        - dnsmasq.conf/
      skip: true
  become: yes
  when: ansible_os_family == "Debian"
  notify:
    - restart dnsmasq
  tags: [ dns, config ]

- name: Make service defaults present on Debian
  template:
    src: '{{ item }}'
    dest: /etc/default/dnsmasq
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ dnsmasq_default }}'
        - dnsmasq.{{ ansible_fqdn }}.j2
        - dnsmasq.category-{{ category }}.j2
        - dnsmasq.deployment-{{ deployment }}.j2
        - dnsmasq.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/default/'
        - default/
  become: yes
  when: ansible_os_family == "Debian"
  notify:
    - restart dnsmasq
  tags: [ dns, config ]

- name: Make service initialization script present on Debian
  template:
    src: '{{ item }}'
    dest: /etc/init.d/dnsmasq
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0755 }}'
  with_first_found:
    - files:
        - '{{ dnsmasq_init }}'
        - dnsmasq.{{ ansible_fqdn }}.j2
        - dnsmasq.category-{{ category }}.j2
        - dnsmasq.deployment-{{ deployment }}.j2
        - dnsmasq.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/init.d/'
        - init.d/
  become: yes
  when: ansible_os_family == "Debian"
  notify:
    - restart dnsmasq
  tags: [ dns, config ]

- name: Get zone configurations
  stat:
    path: '{{ item.0 }}/{{ item.1 }}.j2'
  register: configs_list
  with_nested:
    - [ '{{ dims_custom }}/roles/{{ role_name }}/templates/dnsmasq.d', 'templates/dnsmasq.d' ]
    - '{{ zones }}'
  delegate_to: 127.0.0.1
  ignore_errors: yes
  tags: [ dns, dnsfiles, config ]

- debug: "var=configs_list"
  tags: [ dns, dnsfiles, config ]

- name: Add additional user-supplied configurations
  template:
    src: '{{ item.stat.path }}'
    dest: /etc/dnsmasq.d/{{ item.stat.path|basename|regex_replace("\.j2$","") }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  when: item.stat.exists
  with_items:
    - '{{ configs_list.results }}'
  become: yes
  notify:
    - restart dnsmasq
  tags: [ dns, dnsfiles, config ]

# It isn't necessary to have a 1:1 configuration file to mapping file, so don't
# require the hosts.* version. But load one if it is present.
- name: Get zone host mappings
  stat:
    path: '{{ item.0 }}/{{ item.1 }}.j2'
  register: maps_list
  with_nested:
    - [ '{{ dims_custom }}/roles/{{ role_name }}/templates/mappings', 'templates/mappings' ]
    - '{{ zones }}'
  delegate_to: 127.0.0.1
  ignore_errors: yes
  tags: [ dns, dnsfiles, config ]

- name: Update dnsmasq hosts file for DIMS
  template:
    src: '{{ item.stat.path }}'
    dest: /etc/hosts.{{ item.stat.path|basename|regex_replace("\.j2$","") }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  when: item.stat.exists
  with_items:
    - '{{ maps_list.results }}'
  notify:
    - restart dnsmasq
  tags: [ dns, dnsfiles, config ]

- include: "{{ tasks_path }}/post_tasks.yml"
  tags: [ dns, packages, config ]

# vim: ft=ansible :
