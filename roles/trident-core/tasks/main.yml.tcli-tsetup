---

# File: roles/trident/tasks/main.yml

# This playbook requires Debian Jessie as Trident is only
# supported for running on Debian Jessie.
# See https://github.com/bapril/trident/tree/DEV-1.3

# This role ensures that the defined version of Trident and
# all of its pre-requisite packages are installed. It also
# ensures that the initial "trident" system administration
# account is present (which is required for all further
# system configuration, creation of trust groups and mailing
# lists, etc.) and that the initial system configuration
# of the web UI is present. Configuration of the primary
# trust group and mailing lists is done in other tasks.

- name: Validate Debian Jessie is being used.
  fail: msg="Debian Jessie is required for running Trident."
  when: ansible_lsb.codename is undefined or ansible_lsb.codename != "jessie"

- include: "{{ tasks_path }}/pre_tasks.yml"
  tags: [ trident, config, packages ]

# Default for trident_setup is defined in ../defaults/main.yml
# TODO(dittrich): Disabled temporarily due to bug in 1.4.5
- name: Select setup method
  set_fact: trident_setup='tsetup'
  when: trident.version in [ '1.4.2', '1.4.5' ]

- name: Install required perl libraries
  apt: state=present name={{ item }} force=yes
  with_items:
   - libdbi-perl
   - libdbd-pg-perl
   - libgnupg-perl
   - haveged
   - libdatetime-format-mail-perl
   - libdatetime-format-pg-perl
   - libgnupg-interface-perl
   - libmail-sendeasy-perl
  when: ansible_os_family == "Debian"
  tags: [ trident, packages ]

- name: Make pg_hba.conf present
  template:
    src: '{{ item }}'
    dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ pghba_conf }}'
        - pg_hba.conf.{{ inventory_hostname }}.j2
        - pg_hba.conf.category-{{ category }}.j2
        - pg_hba.conf.deployment-{{ deployment }}.j2
        - pg_hba.conf.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/postgresql/main/'
        - postgresql/main/
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, config ]

# NOTE: Must be restarted before Trident starts so can't use handler.
- name: Ensure postgresql is running
  service: name=postgresql state=restarted enabled=yes
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, config ]

# TODO(dittrich): Need to migrate to public Trident carefully
- name: Make core Trident packages present (tcli)
  get_url:
    url={{ artifacts_url }}/{{ item }}
    dest={{ deploy_dir }}/{{ role_name }}/{{ item }}
  with_items:
    - "trident-cli_{{ trident.version }}_amd64.deb"
    - "trident-server_{{ trident.version }}_amd64.deb"
    - "trident-perl_{{ trident_perl.version }}_amd64.deb"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
  become: yes
  tags: [ trident, packages ]

# TODO(dittrich): Need to migrate to public Trident carefully
- name: Make core Trident packages present (tsetup)
  get_url:
    url={{ artifacts_url }}/{{ item }}
    dest={{ deploy_dir }}/{{ role_name }}/{{ item }}
  with_items:
    - "trident-cli_{{ trident.version }}_amd64.deb"
    - "trident-server_{{ trident.version }}_amd64.deb"
    - "trident_{{ trident.version }}_all.deb"
    - "pitchfork-data_{{ pitchfork.version }}_all.deb"
    - "trident-perl_{{ trident_perl.version }}_amd64.deb"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tsetup'
  become: yes
  tags: [ trident, packages ]

- name: Make trident group present
  group:
    name=trident
    state=present
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident ]

- name: Make trident user present
  user:
    name=trident
    groups=trident,{{ dims_group }}
    state=present
    append=yes
    createhome=no
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident ]

- name: Make dims user present in trident group
  user:
    name={{ dims_user }}
    groups=trident
    state=present
    append=yes
    createhome=no
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident ]

- name: Make postgres user present in trident group
  user:
    name=postgres
    groups=trident
    state=present
    append=yes
    createhome=no
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident ]

# TODO(dittrich): Need to migrate to public Trident carefully
- name: Ensure core Trident packages are installed (tcli)
  shell: "dpkg -i --force-confold {{ deploy_dir }}/{{ role_name }}/{{ item }}"
  with_items:
    - "trident-cli_{{ trident.version }}_amd64.deb"
    - "trident-server_{{ trident.version }}_amd64.deb"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
  become: yes
  notify: restart trident
  tags: [ trident, packages ]

# TODO(dittrich): Need to migrate to public Trident carefully
- name: Ensure core Trident packages are installed (tsetup)
  shell: "dpkg -i --force-confold {{ deploy_dir }}/{{ role_name }}/{{ item }}"
  with_items:
    - "pitchfork-data_{{ pitchfork.version }}_all.deb"
    - "trident-cli_{{ trident.version }}_amd64.deb"
    - "trident-server_{{ trident.version }}_amd64.deb"
    - "trident_{{ trident.version }}_all.deb"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tsetup'
  become: yes
  notify: restart trident
  tags: [ trident, packages ]

# Attempting to install trident-perl without any written instructions.
# Hackety, hackety...

- name: Unpack trident-perl (mail handler) package into /
  shell: "dpkg -x {{ deploy_dir }}/{{ role_name }}/trident-perl_{{ trident_perl.version }}_amd64.deb /"
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, packages ]

- name: Manually extract control files from trident-perl
  shell: >
    dpkg -e {{ deploy_dir }}/{{ role_name }}/trident-perl_{{ trident_perl.version }}_amd64.deb
    {{ deploy_dir }}/{{ role_name }}/trident-perl_DEBIAN
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, packages ]

- name: Manually run trident-perl postinst script to install
  shell: "sh {{ deploy_dir }}/{{ role_name }}/trident-perl_DEBIAN/postinst"
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, packages ]

- name: Make Trident init.d defaults present
  template:
    src: '{{ item }}'
    dest: /etc/default/trident
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_default }}'
        - trident.{{ inventory_hostname }}.j2
        - trident.category-{{ category }}.j2
        - trident.deployment-{{ deployment }}.j2
        - trident.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident/default/'
        - trident/default/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart trident
  tags: [ trident, config ]

- name: Ensure /etc/trident/trident.conf is present
  template:
    src: '{{ item }}'
    dest: /etc/trident/trident.conf
    owner: trident
    group: trident
    mode: '{{ mode_0755 }}'
  with_first_found:
    - files:
        - '{{ trident_conf }}'
        - trident.conf.{{ inventory_hostname }}.j2
        - trident.conf.category-{{ category }}.j2
        - trident.conf.deployment-{{ deployment }}.j2
        - trident.conf.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident/trident.conf/'
        - trident/trident.conf/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart trident
  tags: [ trident, config ]

# NOTE: Make sure configuration matches between the
# /etc/trident/trident.conf file and the following file.
# Tight coupling of variable settings.
- name: Ensure /var/lib/trident/siteconfig is present
  template:
    src={{ item }}
    dest=/var/lib/trident/siteconfig
    owner=trident
    group=trident
    mode={{ mode_0755 }}
  with_first_found:
    - files:
        - '{{ siteconfig }}'
        - siteconfig.{{ inventory_hostname }}.j2
        - siteconfig.category-{{ category }}.j2
        - siteconfig.deployment-{{ deployment }}.j2
        - siteconfig.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident/siteconfig/'
        - trident/siteconfig/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart trident
  tags: [ trident, config ]

- name: Make /etc/nginx/conf.d/trident.conf present
  template:
    src: '{{ item }}'
    dest: /etc/nginx/conf.d/trident.conf
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ nginx_confd_trident }}'
        - trident.conf.{{ inventory_hostname }}.j2
        - trident.conf.category-{{ category }}.j2
        - trident.conf.deployment-{{ deployment }}.j2
        - trident.conf.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/nginx/confd/'
        - nginx/confd/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart nginx
  tags: [ trident, config ]

- name: Make Trident Daemon upstream configuration present
  template:
    src: '{{ item }}'
    dest: /etc/trident/nginx/trident-upstream.inc
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_nginx_upstream }}'
        - trident-upstream.inc.{{ inventory_hostname }}.j2
        - trident-upstream.inc.category-{{ category }}.j2
        - trident-upstream.inc.deployment-{{ deployment }}.j2
        - trident-upstream.inc.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident-nginx/'
        - trident-nginx/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart nginx
  tags: [ trident, config ]

- name: Make Trident Daemon upstream server configuration present
  template:
    src: '{{ item }}'
    dest: /etc/trident/nginx/trident-server.inc
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_nginx_server }}'
        - trident-server.inc.{{ inventory_hostname }}.j2
        - trident-server.inc.category-{{ category }}.j2
        - trident-server.inc.deployment-{{ deployment }}.j2
        - trident-server.inc.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident-nginx/'
        - trident-nginx/
  when: ansible_lsb.codename == "jessie"
  become: yes
  notify: restart nginx
  tags: [ trident, config ]

- name: Ensure SSL file directory exists
  file:
    path: '{{ sslCertDir }}'
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    state: directory
    mode: '{{ mode_0755 }}'
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, config ]

# TODO(dittrich): All given deployment secrets need to be located...somewhere
- name: Load SSL secrets
  include_vars: "ssl-secrets.deployment-{{ deployment }}.yml"
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"
  tags: [ trident, config ]

- name: Copy SSL secret files
  copy:
    dest: '{{ item.key }}'
    content: '{{ item.value.content }}'
    owner: '{{ item.value.owner }}'
    group: '{{ item.value.group }}'
    mode: '{{ item.value.mode }}'
  with_dict: '{{ ssl_secret_files }}'
  no_log: '{{ nolog }}'
  notify: restart nginx
  tags: [ trident, config ]

- name: Ensure 'logo_image' is present (tcli)
  copy:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/gfx/logo.png
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_logo }}'
        - logo.png.{{ inventory_hostname }}
        - logo.png.category-{{ category }}
        - logo.png.deployment-{{ deployment }}
        - logo.png
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/files/logo.png/'
        - files/logo.png/
      skip: true
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
  become: yes
  tags: [ trident, config ]

- name: Ensure 'logo_image' is present (tsetup)
  copy:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/gfx/logo.svg
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_logo }}'
        - logo.svg.{{ inventory_hostname }}
        - logo.svg.category-{{ category }}
        - logo.svg.deployment-{{ deployment }}
        - logo.svg
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/files/logo.svg/'
        - files/logo.svg/
      skip: true
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tsetup'
  become: yes
  tags: [ trident, config ]

- name: Ensure header_image is present
  copy:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/{{ trident.header_image }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_header }}'
        - header_image.jpg.{{ inventory_hostname }}
        - header_image.jpg.category-{{ category }}
        - header_image.jpg.deployment-{{ deployment }}
        - header_image.jpg
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/files/header_image.png/'
        - files/header_image.jpg/
      skip: true
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident, config ]

- name: Ensure cascading style sheet is present (tcli)
  template:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/css/style.css
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_style_css }}'
        - style.css.{{ inventory_hostname }}.j2
        - style.css.category-{{ category }}.j2
        - style.css.deployment-{{ deployment }}.j2
        - style.css.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident/style.css/'
        - trident/style.css/
      skip: true
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
  become: yes
  tags: [ trident, config ]

- name: Ensure cascading style sheet is present (tsetup)
  template:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/css/trident.css
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ trident_css }}'
        - trident.css.{{ inventory_hostname }}.j2
        - trident.css.category-{{ category }}.j2
        - trident.css.deployment-{{ deployment }}.j2
        - trident.css.j2
      paths:
        - '{{ dims_custom }}/roles/{{ role_name }}/templates/trident/trident.css'
        - trident/trident.css/
      skip: true
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tsetup'
  become: yes
  tags: [ trident, config ]

- name: Ensure trident is running and enabled
  service:
    name=trident
    state=running
    enabled=yes
  when: ansible_lsb.codename == "jessie"
  become: yes
  tags: [ trident ]

- name: Determine if trident user already exists in postgres
  shell: "psql -U postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='trident'\""
  when: ansible_lsb.codename == "jessie"
  become: yes
  become_user: 'postgres'
  register: psql_results
  tags: [ trident, config ]

- name: Ensure Trident user and database present (tcli)
  shell: "/usr/sbin/tsetup setup_db"
  when: ansible_lsb.codename == "jessie" and
        psql_results.stdout != "1" and
        trident_setup == 'tcli'
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

- name: Ensure Trident user and database present (tsetup)
  shell: "/usr/sbin/tsetup setup_db"
  when: ansible_lsb.codename == "jessie" and
        psql_results.stdout != "1" and
        trident_setup == 'tsetup'
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

# Add initial sysadmin user. This step is necessary according to Linda's email
# and Trident documentation (last sentence of ``tsetup`` section).
- name: Make initial sysadmin user present (tcli)
  shell: "/usr/sbin/tsetup adduser trident {{ tridentSysAdminPass }}"
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie" and
        psql_results.stdout != "1" and
        trident_setup == 'tcli'
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

- name: Make initial sysadmin user present (tsetup)
  shell: "/usr/sbin/tsetup adduser trident {{ tridentSysAdminPass }}"
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"
        and psql_results.stdout != "1"
        and trident_setup == 'tsetup'
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

- name: Ensure trident administator is logged in (tcli)
  shell: "tcli system login trident {{ tridentSysAdminPass }}"
  register: tcli_login
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

- fail: "Failed to log in via trident: {{ tcli_login.stdout }}"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
        and tcli_login.stdout != "Login successful"
  tags: [ trident ]

- name: Ensure system configuration is present (tcli)
  shell: "{{ item }}"
  with_items:
   - "tcli system swapadmin"
   - "tcli system set name '{{ trident.name }}'"
   - "tcli system set welcome_text '{{ trident.welcome_text }}'"
   - "tcli system set url_public {{ trident.url_public }}"
   - "tcli system set adminname '{{ trident.adminname }}'"
   - "tcli system set adminemail '{{ trident.adminemail }}'"
   - "tcli system set email_domain '{{ trident.email_domain }}'"
   - "tcli system set people_domain '{{ trident.people_domain }}'"
   - "tcli system set logo_image {{ trident.logo_image }}"
   - "tcli system set header_image {{ trident.header_image }}"
  when: ansible_lsb.codename == "jessie"
        and tcli_login.stdout == "Login successful"
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

#- name: Ensure system configuration is present (tsetup)
#  shell: "/usr/sbin/tsetup sudo trident {{ item }}"
#  with_items:
#   - "system swapadmin"
#   - "system set name '{{ trident.name }}'"
#   - "system set welcome_text '{{ trident.welcome_text }}'"
#   - "system set url_public {{ trident.url_public }}"
#   - "system set adminname '{{ trident.adminname }}'"
#   - "system set adminemail '{{ trident.adminemail }}'"
#   - "system set email_domain '{{ trident.email_domain }}'"
#   - "system set people_domain '{{ trident.people_domain }}'"
#   - "system set logo_image {{ trident.logo_image }}"
#   - "system set header_image {{ trident.header_image }}"
#  when: ansible_lsb.codename == "jessie"
#        and trident_setup == 'tsetup'
#  become: yes
#  become_user: 'postgres'
#  tags: [ trident ]

- name: Ensure initial sysadmin user account setup
  shell: "{{ item }}"
  with_items:
   - "tcli user email remove trident@trident.example.net"
   - "tcli user email add trident {{ trident.adminemail }}"
   - "tcli user email confirm_force trident {{ trident.adminemail }}"
  when: ansible_lsb.codename == "jessie"
        and trident_setup == 'tcli'
        and tcli_login.stdout == "Login successful"
  become: yes
  become_user: 'postgres'
  tags: [ trident ]

- name: Make defined bats tests present
  include: "{{ tasks_path }}/bats-tests.yml"
  ignore_errors: yes
  tags: [ trident, tests ]

- include: "{{ tasks_path }}/post_tasks.yml"
  tags: [ trident, config, packages ]

# vim: ft=ansible :
