---

# File: roles/trident/tasks/main.yml

# This playbook requires Debian Jessie as Trident is only
# supported for running on Debian Jessie.
# See https://github.com/bapril/trident/tree/DEV-1.3

# This role ensures that the defined version of Trident and
# all of its pre-requisite packages are installed. It also
# ensures that the initial "trident" system administration
# account is present (which is required for all further
# system configuration, creation of trust groups and mailing
# lists, etc.) and that the initial system configuration
# of the web UI is present. Configuration of the primary
# trust group and mailing lists is done in other tasks.

# NOTE: When upgrading versions of Trident, it is important
# that the PostgreSQL tables and users related to Trident
# are deleted before the upgrade. This playbook checks for
# the existence of a PostgreSQL user called 'trident'. If
# that user exists, subsequent steps which setup Trident
# databases and users are skipped. This can be a problem,
# for example, when the Trident program expects new database
# tables, but the database does not have those tables. (We
# had this problem where we couldn't log in because a table
# called 'iptrk' did not exist, and we didn't know why.)
# To get the new tables, the database must be setup from
# scratch. This note may change if the Trident developers
# define an appropriate method for upgrading the database.
# At that time, we will upgrade this playbook.

# Until then, run:
#  $ sudo apt-get purge postgresql-*
# before running this playbook.

- name: Determine user running ansible
  local_action: command whoami
  become: no
  register: _whoami
  tags: [ always ]

- name: Define trident_initial_user_ident
  set_fact:
    trident_initial_user_ident: '{{ _whoami.stdout }}'
  when: trident_initial_user_ident is not defined
  tags: [ always ]

- name: "Determine user's name"
  local_action: command git config user.name
  become: no
  register: _gitusername
  tags: [ always ]

- name: Define trident_initial_user_descr
  set_fact:
    trident_initial_user_descr: '{{ _gitusername.stdout }}'
  when: trident_initial_user_descr is not defined
  tags: [ always ]

- email: "Determine user's email"
  local_action: command git config user.email
  become: no
  register: _gituseremail
  tags: [ always ]

- email: Define trident_initial_user_descr
  set_fact:
    trident_initial_user_email: '{{ _gituseremail.stdout }}'
  when: trident_initial_user_email is not defined
  tags: [ always ]

  # TODO(dittrich): Figure out why adding GPG is not working and add logic to add it
  # Validate GPG key:
  #  $ gpg --list-packets --verbose dittrich.asc 2>/dev/null | grep "user ID packet"
  # :user ID packet: "Dave Dittrich <dave.dittrich@gmail.com>"

- name: Validate Debian Jessie is being used.
  fail:
    msg: "Debian Jessie is required for running Trident."
  when: ansible_lsb.codename is undefined or ansible_lsb.codename != "jessie"
  tags: [ trident-core, config, packages, tests ]

- include_tasks: '{{ tasks_path }}/pre_tasks.yml'
  tags: [ trident-core, config, packages, tests ]

- name: Install required perl libraries
  apt:
    state: present
    name: '{{ item }}'
    force: yes
  with_items:
   - libdbi-perl
   - libdbd-pg-perl
   - libgnupg-perl
   - haveged
   - libdatetime-format-mail-perl
   - libdatetime-format-pg-perl
   - libgnupg-interface-perl
   - libmail-sendeasy-perl
   - libossp-uuid-perl
   - libmime-tools-perl
  become: yes
  tags: [ trident-core, packages ]

- name: Make pg_hba.conf present
  template:
    src: '{{ item }}'
    dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: 0o644
  with_first_found:
    - files:
       - '{{ pghba_conf }}'
       - pg_hba.conf.{{ inventory_hostname }}.j2
       - pg_hba.conf.category-{{ category }}.j2
       - pg_hba.conf.deployment-{{ deployment }}.j2
       - pg_hba.conf.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/postgresql/main/'
       - postgresql/main/
  become: yes
  tags: [ trident-core, config ]

  # NOTE: Must be restarted before Trident starts so can't use handler.
- name: Apply configuration change
  service:
    name: postgresql
    state: restarted
  become: yes
  tags: [ trident-core, config ]

- name: Make core Trident packages present
  get_url:
    url: '{{ item.url }}'
    sha256sum: '{{ item.sha256sum }}'
    dest: '{{ deploy_dir }}/{{ role_name }}/{{ item.url | basename }}'
  with_items: "{{ trident_dist_bundle }}"
  become: yes
  tags: [ trident-core, packages ]

  # NOTE: trident-perl package is from private source currently,
  # so must retrieve from our cache, not the github debs source.
- name: Make trident-perl package present
  get_url:
    url: '{{ trident_perl_disturl }}'
    sha256sum: '{{ trident_perl_sha256sum }}'
    dest: '{{ deploy_dir }}/{{ role_name }}/{{ trident_perl_disturl|basename }}'
  become: yes
  tags: [ trident-core ]

- name: Make trident group present
  group:
    name: trident
    state: present
  become: yes
  tags: [ trident-core ]

- name: Make trident user present
  user:
    name: trident
    groups: trident,{{ dims_group }}
    state: present
    append: yes
    createhome: no
  become: yes
  tags: [ trident-core ]

- name: Make dims user present in trident group
  user:
    name: '{{ dims_user }}'
    groups: trident
    state: present
    append: yes
    createhome: no
  become: yes
  tags: [ trident-core ]

- name: Make postgres user present in trident group
  user:
    name: postgres
    groups: trident
    state: present
    append: yes
    createhome: no
  become: yes
  tags: [ trident-core ]

- name: Ensure core Trident packages are installed
  apt:
    deb: '{{ deploy_dir }}/{{ role_name }}/{{ item.url|basename }}'
    state: present
  with_items: '{{ trident_dist_bundle }}'
  become: yes
  notify:
    - restart trident
    - restart nginx
  tags: [ trident-core, packages ]

- name: Ensure trident is disabled with service
  service:
    name: trident
    state: stopped
    enabled: no
  become: yes
  when: ansible_service_mgr == 'systemd'
  tags: [ trident-core, packages ]

- name: Ensure trident is running/enabled (systemd)
  systemd:
    name: trident
    state: restarted
    enabled: yes
  become: yes
  when: ansible_service_mgr == 'systemd'
  tags: [ trident-core ]

# Attempting to install trident-perl without any written instructions.
# Hackety, hackety...

- name: Unpack trident-perl (mail handler) package into /
  shell: >
    dpkg -x {{ deploy_dir }}/{{ role_name }}/{{ trident_perl_archive }} /
  become: yes
  tags: [ trident-core, packages ]

- name: Manually extract control files from trident-perl
  shell: >
    dpkg -e {{ deploy_dir }}/{{ role_name }}/{{ trident_perl_archive }}
    {{ deploy_dir }}/{{ role_name }}/trident-perl_DEBIAN
  become: yes
  tags: [ trident-core, packages ]

- name: Manually run trident-perl postinst script to install
  shell: >
    sh {{ deploy_dir }}/{{ role_name }}/trident-perl_DEBIAN/postinst
  become: yes
  tags: [ trident-core, packages ]

- name: Make Trident init.d defaults present
  template:
    src: '{{ item }}'
    dest: /etc/default/trident
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_default }}'
       - trident.{{ inventory_hostname }}.j2
       - trident.category-{{ category }}.j2
       - trident.deployment-{{ deployment }}.j2
       - trident.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/trident/default/'
       - trident/default/
  become: yes
  notify:
    - restart trident
    - restart nginx
  tags: [ trident-core, config ]

- name: Ensure /etc/trident/trident.conf is present
  template:
    src: '{{ item }}'
    dest: /etc/trident/trident.conf
    owner: trident
    group: trident
    mode: 0o755
  with_first_found:
    - files:
       - '{{ trident_conf }}'
       - trident.conf.{{ inventory_hostname }}.j2
       - trident.conf.category-{{ category }}.j2
       - trident.conf.deployment-{{ deployment }}.j2
       - trident.conf.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/trident/trident.conf/'
       - trident/trident.conf/
  become: yes
  notify:
    - restart trident
    - restart nginx
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

# NOTE: Make sure configuration matches between the
# /etc/trident/trident.conf file and the following file.
# Tight coupling of variable settings.
- name: Ensure /var/lib/trident/siteconfig is present
  template:
    src: '{{ item }}'
    dest: /var/lib/trident/siteconfig
    owner: trident
    group: trident
    mode: 0o755
  with_first_found:
    - files:
       - '{{ siteconfig }}'
       - siteconfig.{{ inventory_hostname }}.j2
       - siteconfig.category-{{ category }}.j2
       - siteconfig.deployment-{{ deployment }}.j2
       - siteconfig.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/trident/siteconfig/'
       - trident/siteconfig/
  become: yes
  notify:
    - restart trident
    - restart nginx
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Make /etc/nginx/sites-available/trident present
  template:
    src: '{{ item }}'
    dest: /etc/nginx/sites-available/trident
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ nginx_conf_trident }}'
       - trident.{{ inventory_hostname }}.j2
       - trident.category-{{ category }}.j2
       - trident.deployment-{{ deployment }}.j2
       - trident.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/nginx/sites-available/'
       - nginx/sites-available/
  become: yes
  notify:
    - restart trident
    - restart nginx
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Make /etc/nginx/sites-enabled/trident present
  file:
    src: '/etc/nginx/sites-available/trident'
    dest: '/etc/nginx/sites-enabled/trident'
    state: link
  become: yes
  notify:
    - restart trident
    - restart nginx
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Ensure 'logo.png' is present
  copy:
    src: '{{ item }}'
    dest: /usr/share/pitchfork/webroot/{{ trident_site_logo_image }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_logo }}'
       - logo.png.{{ inventory_hostname }}
       - logo.png.category-{{ category }}
       - logo.png.deployment-{{ deployment }}
       - logo.png
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/files/logo.png/'
       - files/logo.png/
      skip: true
  become: yes
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Ensure 'favicon.ico' is present
  copy:
    src: '{{ item }}'
    dest: /usr/share/pitchfork/webroot/{{ trident_site_favicon_image }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_favicon }}'
       - favicon.ico.{{ inventory_hostname }}
       - favicon.ico.category-{{ category }}
       - favicon.ico.deployment-{{ deployment }}
       - favicon.ico
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/files/favicon.ico/'
       - files/favicon.ico/
      skip: true
  become: yes
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Ensure header_image is present
  copy:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/{{ trident_site_header_image }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_header }}'
       - header_image.jpg.{{ inventory_hostname }}
       - header_image.jpg.category-{{ category }}
       - header_image.jpg.deployment-{{ deployment }}
       - header_image.jpg
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/files/header_image.jpg/'
       - files/header_image.jpg/
      skip: true
  become: yes
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

# NOTE: The command to set unknown person image is called "unknown_image"
# but the default file is named "unknown_person.jpg". Beware.
- name: Ensure unknown_person.jpg is present
  copy:
    src: '{{ item }}'
    dest: /usr/share/pitchfork/webroot/{{ trident_site_unknown_person }}
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_unknown_person }}'
       - unknown_person.jpg.{{ inventory_hostname }}
       - unknown_person.jpg.category-{{ category }}
       - unknown_person.jpg.deployment-{{ deployment }}
       - unknown_person.jpg
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/files/unknown_person.jpg/'
       - files/unknown_person.jpg/
      skip: true
  become: yes
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: Ensure cascading style sheet is present (tsetup)
  template:
    src: '{{ item }}'
    dest: /usr/share/trident/webroot/css/trident.css
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
       - '{{ trident_css }}'
       - trident.css.{{ inventory_hostname }}.j2
       - trident.css.category-{{ category }}.j2
       - trident.css.deployment-{{ deployment }}.j2
       - trident.css.j2
      paths:
       - '{{ dims_private }}/roles/{{ role_name }}/templates/trident/trident.css/'
       - trident/trident.css/
      skip: true
  become: yes
  # TODO(dittrich): Move this to trident-configure role; use tag for now.
  tags: [ trident-core, trident-configure, config ]

- name: tcli system get name
  shell: >
    tcli system get name
  register: _tcli_system_get_name
  tags: [ trident-core, trident-configure, config ]

- name: Define _trident_configured
  set_fact:
    _trident_configured: '{{ not (_tcli_system_get_name.stdout == "" or _tcli_system_get_name.stdout|search("Not Configured")) }}'
  tags: [ trident-core, trident-configure, config ]

- name: Debug _trident_configured
  debug:
    var: _trident_configured
    verbosity: 2
  tags: [ trident-core, trident-configure, config ]

  # "trident" in pg_roles.  The value "1" means the roles
  # exists (which implies that the setup tasks below
  # have already been applied.) If not, it is safe to
  # restore the database prior to applying the rest of
  # the configuration tasks.
  #
  # $ psql -U postgres -tAc "SELECT * FROM pg_roles"
  # postgres|t|t|t|t|t|t|t|-1|***********|||10
  # trident|f|t|f|f|f|t|f|-1|************|||16384
  # $ psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='trident'"
  # 1

- block:
  - name: Determine if trident user already exists in postgres
    shell: >
      psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='trident'"
    become: yes
    become_user: 'postgres'
    register: _psql_result
    tags: [ trident-core ]

  - name: Define _trident_role_exists
    set_fact:
      _trident_role_exists: '{{ _psql_result is defined and _psql_result.stdout == "1" }}'
    tags: [ trident-core ]

  - debug:
      var: _trident_role_exists
      verbosity: 2
    tags: [ trident-core ]

  rescue:
  - name: Define _trident_role_exists
    set_fact:
      _trident_role_exists: false
    tags: [ trident-core ]

- name: Ensure Trident user and database present
  shell: >
    /usr/sbin/tsetup setup_db
  become: yes
  become_user: 'postgres'
  register: _tsetup_db
  when: not _trident_role_exists
  ignore_errors: true
  tags: [ trident-core ]

- name: Define default _trident_restore_status
  set_fact:
    _trident_restore_status: false
  tags: [ trident-core ]

  # Restore database from a previous backup if enabled and if first
  # time.
- include_tasks: '{{ tasks_path }}/trident_restore.yml'
  when: (trident_backup_restorefrom is defined and trident_backup_restorefrom != '')
        and not _trident_configured
  tags: [ trident-core, trident-configure ]

# Add initial sysadmin user. This step is necessary according to Linda's email
# and Trident documentation (last sentence of ``tsetup`` section).
- name: Make initial sysadmin user present
  shell: >
    /usr/sbin/tsetup adduser trident {{ trident_sysadmin_pass }}
  no_log: '{{ nolog }}'
  become: yes
  become_user: 'postgres'
  register: _tsetup
  when: not _trident_restore_status|bool
        and not _trident_role_exists|bool
  changed_when: _tsetup.rc == 0 and _tsetup.stdout == ''
  failed_when: _tsetup.rc != 0 and not _tsetup.stdout|search('duplicate key value violates unique constraint')
  tags: [ trident-core ]

- name: Ensure Trident user password is set
  shell: >
    /usr/sbin/tsetup setpassword trident {{ trident_sysadmin_pass }}
  become: yes
  become_user: 'postgres'
  when: not _trident_restore_status|bool
        and not _trident_role_exists
  ignore_errors: true
  tags: [ trident-core, trident-configure ]

- name: Ensure trident administator can log in
  shell: >
    tcli system login trident {{ trident_sysadmin_pass }}
  register: _tcli_login
  no_log: '{{ nolog }}'
  failed_when: not _tcli_login.stdout|search('Login successful')
  tags: [ trident-core, trident-configure ]

- name: Ensure trident administator is logged out
  shell: >
    tcli system logout
  no_log: '{{ nolog }}'
  tags: [ trident-core ]

- name: Ensure Trident state directories are present
  file:
    state: directory
    path: '/var/lib/trident/webvar/{{ item }}'
    owner: 'trident'
    group: 'trident'
    mode: 0o750
  become: yes
  with_items:
    - ml_keys
    - pgpkeys
  tags: [ trident-core, trident-configure ]


- include_tasks: '{{ tasks_path }}/post_tasks.yml'
  tags: [ trident-core, config, packages, tests ]

# vim: ft=ansible :
