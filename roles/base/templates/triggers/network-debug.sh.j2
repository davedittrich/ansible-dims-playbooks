#!/usr/bin/env /bin/bash
#
# {{ ansible_managed }} [ansible-playbooks v{{ ansibleplaybooks_version }}]
#
# vim: set ts=4 sw=4 tw=0 et :
#
# Copyright (C) 2014-2016, University of Washington. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script performs actions for capturing interfaces information
# and route information.

# Source shflags
. $DIMS/lib/shflags
. $DIMS/bin/dims_functions.sh

# DIMS_DEBUG can be propagated via the environment.
DIMS_DEBUG=${DIMS_DEBUG:-0}
LOGDIR=${LOGDIR:-/vagrant/log}

# Define command line options
DEFINE_boolean 'debug' false 'enable debug mode' 'd'
DEFINE_string  'logdir' "${LOGDIR}" 'log directory' 'L'
DEFINE_boolean 'usage' false 'print usage information' 'u'
DEFINE_boolean 'verbose' false 'be verbose' 'v'

FLAGS_HELP="usage: $BASE [options] args"

# Define functions

usage() {
    flags_help
    cat << EOD

This script captures information about network interfaces
and routes. Flags '--debug' or '--verbose' must be passed to
it from higher-level scripts.

More commands can be added as needed.

EOD
    exit 0
}

main()
{
    # Just exit if all we were asked for was help.
    [[ ${FLAGS_help} -eq ${FLAGS_TRUE} ]] && exit 0
    [[ ${FLAGS_usage} -eq ${FLAGS_TRUE} ]] && usage

    # Just exit since neither 'debug' nor 'verbose' flags were propogated
    if [[ ${FLAGS_debug} -eq ${FLAGS_FALSE} && ${FLAGS_verbose} -eq ${FLAGS_FALSE} ]]; then
        verbose "Skipping network-debug.sh tasks"
        exit 0
    fi

    debug 'debug mode enabled'
    [[ $FLAGS_debug -eq ${FLAGS_TRUE} && $FLAGS_verbose -eq ${FLAGS_TRUE} ]] && set -x

    file_to_logdir ${FLAGS_logdir} /etc/network/interfaces
    command_to_logdir ${FLAGS_logdir} netstat -rn

    exit 0
}

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"
main "$@"
