---

# File: roles/python-virtualenv/tasks/main.yml

# This role is designed to ensure that all necessary components for building
# a Python virtual environment (default name specified by {{ venv_name }}
# (originally 'dimsenv') for use by system programs. This is known as the
# "system Python virtual environment" and its purpose is to isolate a
# specific version of Python and all required tools used by DIMS components
# from the operating system distribution installed Python interpreter, so as
# to not break things due to library incompatibilities and/or system updates.
# Tyring to share a single virtual environment between multiple users, or
# for mixing "production" and "development" activities, is fraught with
# hidden dangers and difficult to debug and recover when something breaks.
#
# This role installs all of the pre-requisite operating system packages
# and downloads all of the source code components that will be used to
# build the system Python virtual environment. It will leave these files
# in the {{ dims_src }} directory for later use in rebuilding or
# testing package upgrades.
#
# Development users will use a script to create their own Python virtual
# environment clone in their $HOME directory file tree, to isolate any
# changes they make for developement and/or testing purposes from the
# system Python virtual environment, which is intended to remain stable
# and functional.

- name: Define dims_ansible_version
  set_fact:
    dims_ansible_version: '{{ _dims_ansible_version }}'
  when: dims_ansible_version is not defined
  tags: [ always ]

- name: Define venv path
  set_fact:
    _venv_path: '{{ dims }}/envs/{{ venv_name }}/bin'
  tags: [ always ]

- name: Stat venv path
  stat:
    path: '{{ _venv_path|dirname }}'
  register: _stat
  tags: [ always ]

- name: Define dims_virtualenv_build
  set_fact:
    dims_virtualenv_build: '{{ not _stat.stat.exists }}'
  when: dims_virtualenv_build is not defined
  tags: [ always ]

- name: Debug dims_virtualenv_build
  debug:
    var: dims_virtualenv_build
    verbosity: 2
  tags: [ always ]

- import_tasks: "{{ tasks_path }}/pre_tasks.yml"
  tags: [ python-virtualenv, packages, config ]

- name: Do not build virtualenv
  debug:
    msg: "Refusing to rebuild existing Python virtualenv. Set 'dims_virtualenv_build=true' to force rebuilding."
    verbosity: 2
  when: not dims_virtualenv_build|bool
  tags: [ python-virtualenv, packages, config ]

- name: Build virtualenv
  import_tasks: build.yml
  when: dims_virtualenv_build|bool
  tags: [ python-virtualenv, packages, config ]

- import_tasks: "{{ tasks_path }}/post_tasks.yml"
  tags: [ python-virtualenv, packages, configs, tests ]

# vim: ft=ansible :
