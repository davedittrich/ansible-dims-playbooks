---

# File: roles/trident-configure/tasks/main.yml

- name: Validate Debian Jessie is being used.
  fail:
    msg: "Debian Jessie is required for running Trident."
  when: ansible_lsb.codename is undefined or ansible_lsb.codename != "jessie"

- include: '{{ tasks_path }}/pre_tasks.yml'
  tags: [ trident-configure, config ]

- name: Load deployment secrets
  include_vars: '{{ dims_private }}/group_vars/vault.yml'
  no_log: '{{ nolog }}'
  when: vault_tridentSysAdminPass is not defined
  tags: [ trident-configure, config ]

- name: Ensure administator is logged in
  shell: >
    tcli system login trident {{ tridentSysAdminPass }} | grep -q "Login successful"
  register: tcli_login
  no_log: '{{ nolog }}'
  tags: [ trident-configure, config ]

- fail:
    msg: "Failed to log in via trident: {{ tcli_login.stdout }}"
  when: tcli_login.rc != 0
  tags: [ trident-configure, config ]

- name: Ensure administrator logged in with sysadmin rights
  shell: >
    tcli system swapadmin | grep -q "Now a SysAdmin user"
  register: tcli_swapadmin
  no_log: '{{ nolog }}'
  tags: [ trident-configure, config ]

- fail:
    msg: "Failed to obtain sysadmin rights: {{ tcli_swapadmin.stdout }}"
  when: tcli_swapadmin.rc != 0
  tags: [ trident-configure, config ]

- name: Ensure system configuration is present (tcli)
  shell: '{{ item }}'
  with_items:
   - 'tcli system set name "{{ trident_site_name }}"'
   - 'tcli system set welcome_text "{{ trident_site_welcome_text }}"'
   - 'tcli system set url_public {{ trident_site_url_public }}'
   - 'tcli system set adminname "{{ trident_site_adminname }}"'
   - 'tcli system set adminemail "{{ trident_site_adminemail }}"'
   - 'tcli system set email_domain "{{ trident_site_email_domain }}"'
   - 'tcli system set people_domain "{{ trident_site_people_domain }}"'
   - 'tcli system set logo_image {{ trident_site_logo_image }}'
   - 'tcli system set header_image {{ trident_site_header_image }}'
  tags: [ trident-configure, config ]

- name: Ensure initial sysadmin user account setup
  shell: '{{ item }}'
  with_items:
   - 'tcli user set descr trident "{{ trident_site_adminname }}"'
   - 'tcli user email remove trident@example.net'
   - 'tcli user email add trident {{ trident_site_adminemail }}'
   - 'tcli user email confirm_force trident {{ trident_site_adminemail }}'
  tags: [ trident-configure, config ]

- name: Retrieve present trust groups from tcli
  shell: >
    tcli group list | grep -v 'No Groups Found' | awk '{ print $1; }'
  register: results
  tags: [ trident-configure, config ]

- name: Extract list of present trust groups
  set_fact:
    groups_present: '{{ results.stdout_lines }}'
  tags: [ trident-configure, config ]

- name: Determine present members of primary TG from tcli
  shell: >
    tcli group member list {{ trident_site_trust_groups.0.name }} | awk '{ print $1; }'
  register: results
  tags: [ trident-configure, config ]

- name: Extract list of present members
  set_fact:
    members_present: '{{ results.stdout_lines }}'
  tags: [ trident-configure, config ]

# Add new users to Trident
- name: Setup new users
  shell: >
    tcli user new {{ item.ident }} {{ item.email }} &&
    tcli user set descr {{ item.ident }} '{{ item.descr }}' &&
    tcli user email confirm_force {{ item.ident }} {{ item.email }}
  with_items: '{{ trident_site_trust_groups.0.initial_users }}'
  when: item.ident not in members_present
  tags: [ trident-configure, config ]

# TODO(dittrich): Generalize to loop over all TGs - for now just .0
- name: Add trust group
  shell: >
    tcli group add {{ trident_site_trust_groups.0.name }} &&
    tcli group set descr {{ trident_site_trust_groups.0.name }} '{{ trident_site_trust_groups.0.settings.descr }}'
  when: trident_site_trust_groups.0.name not in groups_present
  tags: [ trident-configure, config ]

- name: Add new members to primary tg
  shell: >
    tcli group member add {{ trident_site_trust_groups.0.name }} {{ item.ident }} &&
    tcli group member approve {{ trident_site_trust_groups.0.name }} {{ item.ident }}
  with_items: '{{ trident_site_trust_groups.0.initial_users }}'
  register: results
  when:
    - trident_site_trust_groups.0.name not in groups_present
    - item.ident not in members_present
  tags: [ trident-configure, config ]
 
- name: Determine present primary TG mailing lists
  shell: >
    tcli ml list {{ trident_site_trust_groups.0.name }} | awk '{ print $1; }'
  register: results
  tags: [ trident-configure, config ]

- name: Isolate mailing list names
  set_fact:
    lists_present: '{{ results.stdout_lines }}'
  tags: [ trident-configure, config ]

- name: Add additional mailing lists
  shell: >
    tcli ml new {{ trident_site_trust_groups.0.name }} {{ item.ident }} &&
    tcli ml set descr {{ trident_site_trust_groups.0.name }} {{ item.ident }} '{{ item.descr }}'
  with_items: '{{ trident_site_trust_groups.0.additional_lists }}'
  when: item.ident not in lists_present
  tags: [ trident-configure, config ]

  # NOTE(mboggess): these mailing lists are additional
  # to mailing lists automatically created when a trust group
  # is created (admin, general, vetting). This means all members
  # of the trust group must be "manually" added to these
  # additional mailing lists.
  # This task then assumes that no trust group members have
  # been added to them, and, as such, does not check to see
  # if a member exists on a mailing list already, it just
  # adds all members to all mailing lists.
- name: Add all members to all mailing lists
  shell: >
    tcli ml member add {{ trident_site_trust_groups.0.name }} {{ item[0] }} {{ item[1] }}
  with_nested:
    - '{{ trident_site_trust_groups.0.additional_lists | map(attribute="ident") | list }}'
    - '{{ trident_site_trust_groups.0.initial_users | map(attribute="ident") | list }}'
  tags: [ trident-configure, config ]

- name: Add admins to admin list
  shell: >
    tcli ml member add {{ trident_site_trust_groups.0.name }} admin {{ item }}
  with_items: '{{ trident_site_admins }}'
  tags: [ trident-configure, config ]

  # We give our admins both system administration rights
  # and trust group administration rights. 
  # NOTE(mboggess): passwords are not set for these users.
  # They must be set manually via tcli using:
  # $ tcli user password help
  #   Trident Help for: "user password"
  #   User: trident [sysadmin]
  #
  #   set <pwtype> <username> <newpassword> <curpassword> Set password of type (portal|chat|jabber), requires providing current portal password
  #   recover <username> <token> <password> Set a password using the the recovery token
  #   resetcount <username> Reset authentication failure count
  #   reset <username> <nominator> Send a recovery password split between the user and a nominator
- name: Give admins sysadmin/tg admin rights
  shell: >
    tcli user set sysadmin {{ item }} true &&
    tcli group member promote {{ trident_site_trust_groups.0.name }} {{ item }}
  with_items: '{{ trident_site_admins }}'
  tags: [ trident-configure, config ]

- name: Extract list of settings keys
  set_fact:
    settings_keys: '{{ trident_site_trust_groups.0.settings.keys() }}'
  tags: [ trident-configure, config ]

- debug: var=settings_keys
  tags: [ trident-configure, config ]

  # tcli group set has_wiki main yes
- name: Ensure settings are applied to trust groups
  shell: >
    tcli group set {{ item.1 }} {{ item.0.name }} {{ item.0.settings[item.1] }}
  with_nested:
    - '{{ trident_site_trust_groups }}'
    - '{{ settings_keys }}'
  tags: [ trident-configure, config ]

- name: Ensure trident administator is logged out
  shell: >
    tcli system logout
  no_log: '{{ nolog }}'
  tags: [ trident-configure, config ]

- name: Run unit test for trident-configure
  command: '{{ dims_bin }}/test.runner --tap --level unit --match "trident-configure"'
  environment:
    DIMS: '{{ dims }}'
    PATH: '{{ dims_bin }}:{{ ansible_env.PATH }}'
  tags: [ trident-configure, config ]

- include: '{{ tasks_path }}/post_tasks.yml'
  tags: [ trident-configure, config ]

# vim:ft=ansible:
