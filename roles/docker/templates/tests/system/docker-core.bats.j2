#!/usr/bin/env bats
#
# {{ ansible_managed }} [ansible-playbooks v{{ ansibleplaybooks_version }}]
#
# vim: set ts=4 sw=4 tw=0 et :

load helpers

function setup() {
    source $DIMS/bin/dims_functions.sh
}

@test "[S][EV] The user 'dims' is in the 'docker' group" {
    run bash -c "groups dims | grep -q docker"
}

@test "[S][EV] Installed docker package version is {{ docker_ce_version }}" {
    assert "{{ docker_ce_version }}" dpkg -s docker-ce | grep Version | awk '{ print $2; }' | sed 's/~debian//'
}

# NOTE: Version numbers as stored in variables like docker_ce_version
# look like "18.03.1~ce-0" or "18.03.1~ce-3-0" (to identify patch level releases),
# but the number returned by the docker client program using --version looks
# like "18.06.3-ce". The trailing patch release identifiers need to be stripped
# and "~" converted to "-", hence the use of Jinja2 regex_replace() filters.

@test "[S][EV] Docker Client version aligns to package version ({{ docker_ce_version }})" {
    is_coreos && skip "Not applicable on CoreOS"
    bash -c "[[ \"{{ docker_ce_version | regex_replace('~', '-') }}\" =~ \"$(docker version --format '{{ '{{ ' }}.Client.Version{{ ' }}' }}')\" ]]"
}

@test "[S][EV] Docker Server version aligns to package version ({{ docker_ce_version }})" {
    is_coreos && skip "Not applicable on CoreOS"
    bash -c "[[ \"{{ docker_ce_version | regex_replace('~', '-') }}\" =~ \"$(docker version --format '{{ '{{ ' }}.Server.Version{{ ' }}' }}')\" ]]"
}

# NOTE: Programs like docker-machine report their version numbers in a
# manner that complicates parsing, hence the use of sed:
# $ docker-machine --version
# docker-machine version 0.10.0, build 76ed2a6

# We want 'grep -v' to fail, so don't let that stop things
@test "[S][EV] APT repo host \"{{ docker_repo_host }}\" is only defined in 'docker.list'" {
    assert '' bash -c "grep -l {{ docker_repo_host }} /etc/apt/sources.list.d/*.list | grep -v docker.list || true"
}

@test "[S][EV] APT repo pool for \"docker-ce\" is \"{{ docker_ce_pool }}\"" {
    is_coreos && skip "Not applicable on CoreOS"
    assert "{{ docker_ce_pool }}" bash -c "grep {{ docker_repo_host }} /etc/apt/sources.list.d/docker.list | awk '{ print \$NF; }'"
}

{% if docker_machine_version is defined %}
@test "[S][EV] Docker machine version is {{ docker_machine_version | regex_replace('-[0-9]+$', '') }}" {
    is_coreos && skip "Not applicable on CoreOS"
    assert "docker-machine version {{ docker_machine_version | regex_replace('-[0-9]+$', '') }}" bash -c "docker-machine --version | sed 's/, build.*//'"
}
{% endif %}

@test "[S][EV] Docker compose version is {{ docker_compose_version | regex_replace('-[0-9]+$', '') }}" {
    is_coreos && skip "Not applicable on CoreOS"
    assert "docker-compose version {{ docker_compose_version | regex_replace('-[0-9]+$', '') }}" bash -c "docker-compose --version | sed 's/, build.*//'"
}

@test "[S][EV] Docker compose Bash completions is present in {{ dims_etc_bashrc }}" {
    is_coreos && skip "Not applicable on CoreOS"
    [ -r "{{ dims_etc_bashrc }}/docker-compose" ]
}
