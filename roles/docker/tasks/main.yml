---

# file: roles/docker/tasks/main.yml

# Follow instructions from Docker web site on installation for
# installing Docker CE on Ubuntu and Debian (respectively):
# https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/
# https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/

- name: Define docker_apt_key_url
  set_fact:
    docker_apt_key_url: '{{ _docker_apt_key_url }}'
  when: docker_apt_key_url is not defined
  tags: [ docker, packages, config, tests ]

- name: Define docker_apt_key_id
  set_fact:
    docker_apt_key_id: '{{ _docker_apt_key_id }}'
  when: docker_apt_key_id is not defined
  tags: [ docker, packages, config, tests ]

- name: Define docker_repo_host
  set_fact:
    docker_repo_host: '{{ _docker_repo_host }}'
  when: docker_repo_host is not defined
  tags: [ docker, packages, config, tests ]

- name: Define docker_ce_pool
  set_fact:
    docker_ce_pool: '{{ _docker_ce_pool }}'
  when: docker_ce_pool is not defined
  tags: [ docker, packages, config, tests ]

- name: Define docker_ce_version
  set_fact:
    docker_ce_version: '{{ _docker_ce_version }}'
  when: docker_ce_version is not defined
  tags: [ docker, packages, config, tests ]

- name: Define docker_compose_version
  set_fact:
    docker_compose_version: '{{ _docker_compose_version }}'
  when: docker_compose_version is not defined
  tags: [ docker, packages, config, tests ]

  # Define docker_machine_version to get docker-machine

- import_tasks: "{{ tasks_path }}/pre_tasks.yml"
  tags: [ docker, packages, config, tests ]

- name: Ensure all old Docker versions are gone
  apt:
    name: '{{ item }}'
    state: absent
    purge: true
    force: true
  with_items:
    - 'docker.io'
    - 'docker'
    - 'docker-engine'
  become: yes
  ignore_errors: true
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Add Docker repo signing key
  apt_key:
    url: '{{ docker_apt_key_url }}'
    id: '{{ docker_apt_key_id }}'
    state: present
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Install pre-requisites for CentOS
  yum:
    name: '{{ item }}'
    state: present
    update_cache: yes
  with_items:
    - yum-utils
    - device-mapper-persistent-data
    - lvm2
  when: ansible_distribution == "CentOS"
  tags: [ docker, packages ]

- name: Ensure CentOS repo is installed
  yum_repository:
    name: 'docker-ce'
    description: 'Docker CE Stable - {{ ansible_architecture }}'
    baseurl: 'https://download.docker.com/linux/centos/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable'
    enabled: yes
    gpgcheck: yes
    gpgkey: 'https://download.docker.com/linux/centos/gpg'
  when: ansible_distribution == "CentOS"
  tags: [ docker, packages ]

# Alter instructions for Ansible:
#   $(lsb_release -cs) ==> ansible_lsb.codename

- name: Make backports present for APT on Debian jessie/stretch
  apt_repository:
    repo: 'deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_lsb.codename }} {{ docker_ce_pool }}'
    filename: 'docker'
    state: present
    update_cache: yes
  when: ansible_distribution == "Debian" and ansible_lsb.codename in [ "jessie", "stretch" ]
  tags: [ docker, packages ]

- fail: msg='Only supporting installation on Debian "jessie" or "stretch" in this role'
  when: ansible_distribution == "Debian" and not ansible_lsb.codename in [ "jessie", "stretch" ]
  tags: [ docker, packages ]

- name: Ensure proper kernel is installed on Ubuntu
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - 'linux-image-extra-{{ ansible_kernel }}'
    - 'linux-image-virtual'
  become: yes
  when: ansible_distribution == "Ubuntu"
  tags: [ docker, packages ]

# Name in "filename" is tightly coupled with test in docker-core.bats.j2
- name: Make deb sources present
  apt_repository:
    repo: 'deb [arch=amd64] https://{{ docker_repo_host }}/linux/{{ ansible_distribution|lower }} {{ ansible_lsb.codename }} {{ docker_ce_pool }}'
    filename: 'docker'
    state: present
    update_cache: yes
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

# NOTE: You can find a list of the available versions in the output of
# this play, so it is being stored in a file in /tmp.

- name: Verify APT repository and contents
  shell: >
    apt-cache madison docker-ce | tee /tmp/docker-versions.txt
  become: yes
  register: _apt_cache
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Debug docker versions
  debug:
    var: _apt_cache.stdout_lines
    verbosity: 1
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Verify docker group exists
  group:
    name: docker
    state: present
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, config ]

# TODO(dittrich): Should do this in user install scripts (users may not be present yet)
- name: Ensure dims users are in docker group
  user: "name={{ item }} append=yes groups=docker"
  with_items: [ dims, ansible ]
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, config ]

- name: Make docker-ce present (apt)
  apt:
    name: 'docker-ce={{ docker_ce_version }}~{{ ansible_distribution|lower }}'
    state: present
    force: yes
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ docker, packages ]

- name: Make docker-ce present (yum)
  yum:
    name: 'docker-ce-{{ docker_ce_version }}*'
    state: present
  when: ansible_distribution == "CentOS"
  become: yes
  tags: [ docker, packages ]

- name: Hold updates of docker-ce package
  dpkg_selections:
    name: docker-ce
    selection: hold
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Make Docker compose absent
  file: name={{ dims_bin }}/docker-compose state=absent
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Make Docker compose present
  get_url:
    url=https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}
    dest={{ dims_bin }}/docker-compose
    mode=0o775
    use_proxy=yes
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Make Docker machine absent
  file: name={{ dims_bin }}/docker-machine state=absent
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, packages ]

- name: Make Docker machine present
  get_url:
    url=https://github.com/docker/machine/releases/download/v{{ docker_machine_version }}/docker-machine-{{ ansible_system }}-{{ ansible_architecture }}
    dest={{ dims_bin }}/docker-machine
    mode=0o775
    use_proxy=yes
  become: yes
  when: ansible_os_family == "Debian" and docker_machine_version is defined
  tags: [ docker, packages ]

- name: Ensure docker.service unit present (systemd)
  template:
    src: '{{ item }}'
    dest: /etc/systemd/system/docker.service
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
        - '{{ docker_service }}'
        - 'docker.service.{{ inventory_hostname }}.j2'
        - 'docker.service.category-{{ category }}.j2'
        - 'docker.service.deployment-{{ deployment }}.j2'
        - 'docker.service.j2'
      paths:
        - '{{ dims_private }}/roles/{{ role_name }}/templates/docker.service/'
        - docker.service/
  when: ansible_service_mgr == "systemd"
  become: yes
  notify:
    - 'restart docker'
  tags: [ docker, config ]

- name: Make Docker defaults present
  template:
    src: '{{ item }}'
    dest: /etc/default/docker
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: 0o644
  with_first_found:
    - files:
        - '{{ docker_default }}'
        - docker.{{ inventory_hostname }}.j2
        - docker.category-{{ category }}.j2
        - docker.deployment-{{ deployment }}.j2
        - docker.j2
      paths:
        - '{{ dims_private }}/roles/{{ role_name }}/templates/default/'
        - default/
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ docker, config ]

# Note: The iptables tag is here because Docker is responsible for creating a
#       chain in the NAT table. If you just replace the general rules from the
#       base role and restart iptables, the chain created by Docker is removed and
#       Docker cannot start/restart services as the entries it tries to create
#       have no chain to be inserted into.

- name: 'Reload the docker service configuration (systemd)'
  systemd:
    name: docker
    state: started
    daemon_reload: yes
  when: ansible_service_mgr == "systemd"
  become: yes
  tags: [ docker, packages, config, iptables ]

- name: Make Docker Bash completions present
  get_url:
    url=https://raw.githubusercontent.com/docker/compose/{{ docker_compose_version }}/contrib/completion/bash/docker-compose
    dest={{ dims_etc_bashrc }}
    mode=0o664
    use_proxy=yes
  become: yes
  when: ansible_os_family == "Debian"
  tags: [ docker, config ]

- name: Make docker-clean script present
  get_url:
    url=https://raw.githubusercontent.com/ZZROTDesign/docker-clean/v2.0.4/docker-clean
    dest={{ dims_bin }}/docker-clean
    mode=0o755
    use_proxy=yes
  become: yes
  tags: [ docker, config ]

- name: Ensure Docker is enabled (CoreOS)
  service:
    name=docker.service
    state=started
    enabled=true
  when: ansible_os_family == "Container Linux by CoreOS"
  become: yes
  tags: [ docker, config ]

- import_tasks: "{{ tasks_path }}/post_tasks.yml"
  tags: [ docker, packages, config ]

# vim: ft=ansible :
