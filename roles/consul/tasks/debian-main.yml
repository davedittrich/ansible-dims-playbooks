---

# file: roles/consul/tasks/debian-main.yml

# TODO(dittrich): See http://jira.prisem.washington.edu/browse/DIMS-633
#
# The following Python virtual environment plays were taken from
# $GIT/ansible-playbooks/roles/prisem-scripts-deploy/tasks/main.yml. Since they
# are replicated here, the logic is coupled with the that other script and any
# changes must be made to both locations.  We may need to revisit how the
# Python virtual environment is used with Ansible to simplify and be more
# consistent across playbooks.  See Jira ticket DIMS-633.

# Installation hints from:
# https://www.digitalocean.com/community/tutorials/how-to-configure-consul-in-a-production-environment-on-ubuntu-14-04
# https://serversforhackers.com/preview/system-process-monitoring/
# http://stackoverflow.com/questions/9641996/upstart-node-js-app-stop-unknown-instance
#
# Pay attention to /var/log/upstart/consul.log when debugging.
#
# TODO(dittrich): Document how this upstart file was created and debugged in dims-devguide
# so others know how to do it (include dims-dashboard-deploy/templates/dims-dashboard-upstart.conf.j2,
# which was consulted in the creation of this playbook.)

- name: Stop consul service if running - ignore errors
  service:
    name: consul
    state: stopped
  become: yes
  ignore_errors: true
  when: ansible_os_family == "Debian"
  notify: restart consul
  tags: [ consul, packages ]

# Download and install Consul from source
# TODO(dittrich): The certificate check fails (SNI?), but the SHA256 hash exists to validate download.
- name: Make Consul distribution archive present
  get_url:
    url: '{{ consul_dist_url  }}/{{ consul_artifact }}'
    dest: '{{ dims_deploy }}/{{ role_name }}'
    sha256sum: '{{ consul_sha256sum }}'
    validate_certs: false
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul, packages ]

# TODO(dittrich): Should check hash like Pycharm, dnsmasq, etc.

- name: Unzip contents of Consul archive into DIMS bin directory
  shell: "unzip -u -o {{ dims_deploy }}/{{ role_name }}/{{ consul_artifact }} -d {{ dims_bin }}"
  when: ansible_os_family == "Debian"
  become: yes
  notify: restart consul
  tags: [ consul, packages ]

- name: Make base Consul configuration directory present
  file:
    state=directory
    path=/etc/consul.d
    owner={{ dims_user }}
    group={{ dims_group }}
    mode={{ mode_0775 }}
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul, config ]

- name: Make Consul configuration directories present
  file:
    state=directory
    path=/etc/consul.d/{{ item }}
    owner={{ dims_user }}
    group={{ dims_group }}
    mode={{ mode_0775 }}
  with_items:
    - bootstrap
    - server
    - client
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul, config ]

- name: Create consul startup JSON cluster config
  template:
    src=config/consul_{{ consul_agent_type }}_json.j2
    dest=/etc/consul.d/{{ consul_agent_type }}/consul.json
    owner={{ dims_user }}
    group={{ dims_user }}
    mode={{ mode_0640 }}
  when: ansible_os_family == "Debian"
  become: yes
  notify: restart consul
  tags: [ consul, config ]

- name: Create persistence directory for use by Consul
  file:
    state=directory
    path={{ consul_data_dir }}
    owner={{ dims_user }}
    group={{ dims_group }}
    mode={{ mode_0770 }}
    recurse=yes
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul, packages ]

- name: Create inital consul.log file
  file:
    state=touch
    path={{ consul_log_file }}
    owner={{ dims_user }}
    group={{ dims_user }}
    mode={{ mode_0640 }}
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul ]

- name: Make consul.run startup script present
  template:
    src=consul.run.j2
    dest={{ dims_bin }}/consul.run
    owner={{ dims_user }}
    group={{ dims_group }}
    mode={{ mode_0755 }}
  when: ansible_os_family == "Debian"
  become: yes
  notify: restart consul
  tags: [ consul, packages ]


- name: Make consul upstart configuration present (upstart)
  template:
    src=upstart/consul.conf.j2
    dest=/etc/init/consul.conf
    owner={{ root_user }}
    group={{ root_group }}
    mode={{ mode_0644 }}
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  notify: restart consul
  tags: [ consul, config ]

- name: Validate consul config file syntax (upstart)
  shell: "init-checkconf /etc/init/consul.conf"
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  tags: [ consul, config ]

- name: Create consul defaults (upstart)
  template:
    src=upstart/consul_default.j2
    dest=/etc/default/consul
    owner={{ root_user }}
    group={{ root_group }}
    mode={{ mode_0644 }}
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  tags: [ consul, config ]

- name: Make consul /etc/init.d startup script present (upstart)
  template:
    src=upstart/consul.j2
    dest=/etc/init.d/consul
    owner={{ root_user }}
    group={{ root_group }}
    mode={{ mode_0755 }}
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  tags: [ consul, config ]

- name: Register the consul init script (upstart)
  shell: "update-rc.d consul defaults"
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  tags: [ consul, config ]

- name: Register the consul upstart configuration (upstart)
  shell: "initctl reload-configuration"
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8 )
  become: yes
  notify: restart consul
  tags: [ consul, config ]

- name: Make consul.service unit present (systemd)
  template:
    src: '{{ item }}'
    dest: /etc/systemd/system/consul.service
    owner: '{{ root_user }}'
    group: '{{ root_group }}'
    mode: '{{ mode_0644 }}'
  with_first_found:
    - files:
        - '{{ base_hosts }}'
        - 'consul.service.{{ inventory_hostname }}.j2'
        - 'consul.service.category-{{ category }}.j2'
        - 'consul.service.deployment-{{ deployment }}.j2'
        - 'consul.service.j2'
      paths:
        - '{{ dims_private }}/roles/{{ role_name }}/templates/systemd/'
        - systemd/
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int > 14 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int > 7 )
  become: yes
  notify: restart consul
  tags: [ consul, packages ]

- name: Reload the consul service configuration (systemd)
  shell: "systemctl daemon-reload"
  when: ( ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int > 14 ) or
        ( ansible_distribution == "Debian" and ansible_distribution_major_version|int > 7 )
  become: yes
  notify: restart consul
  tags: [ consul, packages ]

- name: Ensure consul is started and enabled
  service:
    name: consul
    state: started
    enabled: yes
  when: ansible_os_family == "Debian"
  become: yes
  tags: [ consul, packages ]

# vim: ft=ansible :
