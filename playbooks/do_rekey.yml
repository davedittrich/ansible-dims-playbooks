---

# File: playbooks/do_rekey.yml

# Process DigitalOcean droplet SSH public keys

- hosts: localhost
  connection: local
  gather_facts: false
  become: yes
  vars:
    remove_keys: false
    ansible_python_interpreter: "python"

  tasks:
  - name: Define known_hosts_files
    set_fact:
      ssh_known_hosts_files: '{{ ssh_known_hosts_files|default([]) + [ item ] }}'
    with_items:
    - /etc/ssh/ssh_known_hosts
    - /root/.ssh/known_hosts
    - '{{ lookup("pipe", "echo ~{{ ansible_user }}/.ssh/known_hosts") }}'

  - name: Remove old SSH host keys
    local_action: known_hosts path={{ item.0 }} host={{ item.1 }} state=absent
    ignore_errors: True
    with_nested:
    - '{{ ssh_known_hosts_files }}'
    - '{{ groups.do }}'
    when: remove_keys|bool

  #- name: Fix .ssh/known_hosts.
  #  local_action: command  ssh-keygen -f "~/.ssh/known_hosts" -R {{ item.public_ip }} 
  #  with_items: ec2_info.instances
 
  - name: Gather SSH host keys into list
    set_fact:
      ssh_host_public_keys: '{{ ssh_host_public_keys|default([]) }} + {{ hostvars[item].ssh_host_public_keys }}'
    with_items: '{{ groups.do }}'
    when: not remove_keys|bool

  - name: Ensure new SSH host key present
    local_action: known_hosts path={{ item.0 }} key="{{ item.1 }}" host="{{ item.1.split(' ')[0].split(',')[0] }}" state=present
    ignore_errors: True
    with_nested:
    - '{{ ssh_known_hosts_files }}'
    - '{{ ssh_host_public_keys }}'
    when: not remove_keys|bool

  - name: Fix file permissions on global known_hosts file
    file:
      path: '{{ ssh_known_hosts_files.0 }}'
      mode: 0o644

# vim: ft=ansible :
