.. _appendices

Appendices
==========

.. _restart_proxy:

Quick Steps to Restarting Squid Proxy Container
-----------------------------------------------

Downloading and installing several hundred packages per host while testing
provisioning of multiple Vagrant virtual machines can take several hours to
perform over a 1-5 Mbps network connection. Even a single Vagrant can take
around 45 minutes to fully provision after a ``vagrant destroy``. Since
this task may need to be done over and over again, even for just one
system, the process becomes very tedious and time consuming.

To minimize the number of remote downloads, a local proxy can help immensely.
The DIMS project utilizes a ``squid-deb-proxy`` running in a Docker container
on VM host systems to allow all of the local VMs to take advantage of a single
cacheing proxy on the host.  This significantly improves performance (cutting
the time down to just a few minutes), but this comes at a cost in occassional
instability due to the combination of ``iptables`` firewall rules that must
contain a ``DOCKER`` chain for Docker, which attempts to keep the
``squid-deb-proxy`` container running across reboots of the VM host can result
in the the container effectively "hanging" from time to time.  This manifests
as a random failure in an Ansible task that is trying to use the configured
proxy (e.g., see the ``python-virtualenv`` build failure in Section
:ref:`_using_dims_functions_in_bats`.)

A ``bats`` test exists to test the proxy:

.. code-block:: none

    $ test.runner --level '*' --match proxy
    [+] Running test integration/proxy
     ✗ [S][EV] HTTP download test (using wget, w/proxy if configured)
       (in test file integration/proxy.bats, line 16)
         `[ ! -z "$(wget -q -O - http://http.us.debian.org/debian/dists/jessie/Release | grep non-free/source/Release 2>/dev/null)" ]' failed
     ✗ [S][EV] HTTPS download test (using wget, w/proxy if configured)
       (in test file integration/proxy.bats, line 26)
         `[ ! -z "$(wget -q -O - https://packages.debian.org/jessie/amd64/0install/filelist | grep 0install 2>/dev/null)" ]' failed

    2 tests, 2 failures

..

When it fails like this, it usually means that ``iptables`` must be restarted,
followed by restarting the ``docker`` service, followed by restarting the
``squid-deb-proxy`` container.

.. note::

    The root cause and a more reliable solution has not yet been determined,
    nor have these steps been automated. Pull requests are welcomed!

..

.. code-block:: none

    $ cd $GIT/dims-dockerfiles/dockerfiles/squid-deb-proxy

    $ for S in iptables-persistent docker; do sudo service $S restart; done
     * Loading iptables rules...
     *  IPv4...
     *  IPv6...
       ...done.
    docker stop/waiting
    docker start/running, process 22065

    $ make rm
    docker stop dims.squid-deb-proxy
    test.runner -dims.squid-deb-proxy
    docker rm dims.squid-deb-proxy
    -dims.squid-deb-proxy

    $ make daemon
    docker run \
              --name dims.squid-deb-proxy \
              --restart unless-stopped \
              -v /vm/cache/apt:/cachedir -p 127.0.0.1:8000:8000 squid-deb-proxy:0.7 2>&1 >/dev/null &
    2017/07/22 19:31:29| strtokFile: /etc/squid-deb-proxy/autogenerated/pkg-blacklist-regexp.acl not found
    2017/07/22 19:31:29| Warning: empty ACL: acl blockedpkgs urlpath_regex "/etc/squid-deb-proxy/autogenerated/pkg-blacklist-regexp.acl"

..

The test should now succeed:

.. code-block:: none

    $ test.runner --level '*' --match proxy
    [+] Running test integration/proxy
     ✓ [S][EV] HTTP download test (using wget, w/proxy if configured)
     ✓ [S][EV] HTTPS download test (using wget, w/proxy if configured)

    2 tests, 0 failures

..

