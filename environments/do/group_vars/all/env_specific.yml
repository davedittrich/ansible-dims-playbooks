---

category: 'devops'
deployment: 'local'
dims_fqdn: '{{ inventory_hostname }}.{{ dims_domain }}'
dims_domain: '{{ (lookup("env", "DIMS_DOMAIN") == "")|ternary(ansible_domain,lookup("env", "DIMS_DOMAIN")) }}'
playbooks_root: '{{ lookup("env", "PBR") }}'
#dims_private: '{{ lookup("env", "GIT") }}/private-{{ deployment }}'
dims_private: '{{ playbooks_root }}'

shflags_version: 'v1.2.2'

# The following variables only exist for compatibility with
# the original PRISEM Project RPC scripts.  They reflect
# the settings from group_vars/all/rabbitmq.yml and will
# be removed when the PRISEM RPC code can be updated.

amqp_port: '{{ rabbitmq_tcp_listen_port }}'
amqp_mgmt_port: '{{ rabbitmq_mgmt_listen_port }}'
amqp_program: 'rabbitmq'
amqp_server: '{{ groups.rabbitmq|list_to_string_args }}'

# Local customization variables (remainder are in role's vars/main.yml file)

# These are used by programs outside the consul role, so they are
# defined here for all hosts.

consul_ui_port: 8500
consul_dns_port: 8600
consul_start_join: '[{{ groups.consul|list_to_string_args }}]'
consul_retry_join: '[{{ groups.consul|list_to_string_args }}]'
consul_data_center: '{{ ansible_domain }}'
consul_dns_domain: '{{ ansible_domain }}'
# Type (and mode... not sure why both?) are set based on whether in groups.consul
consul_agent_type: '{{ (inventory_hostname in groups.consul)|ternary("server","client") }}'
consul_mode: '{{ (inventory_hostname in groups.consul)|ternary("server","client") }}'

cronvars:
  - name: 'MAILTO'
    value: '{{ postmaster|default("postmaster") }}'
    user: 'ansible'
  - name: 'PATH'
    value: '{{ dims_global_path }}'
    user: 'ansible'

cronjobs:
  - name: 'dims.updatecheck'
    weekday: '*'
    hour: '6'
    minute: '0'
    user: 'ansible'
    job: '{{ dims_bin }}/dims.updatecheck'

yaml_mode_whitelist:
  - 'mode: push'
  - "{% raw %}mode: '{{ item.value.mode }}'{% endraw %}"

# Try to use this as the PATH set at the lowest level for shells, startup scripts,
# etc. This way there is more consistency across system components, so less chance
# for random failures or random behavior in scripts.
dims_global_path: '{{ dims_bin }}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

dims_kibana_port: 8480
dims_ssh_port: 8422
dims_ssl_port: 8443
# TODO(dittrich): This is a confusing name (left over from old role)
dims_elasticsearch_kibana_port: 9200

# Default browser page
dims_kibana_url: 'http://localhost:{{ dims_kibana_port }}/#/dashboards/UFW_Data.json'
dims_owf_url: 'https://ops.local:{{ dims_ssl_port }}/owf/'
dims_firefox_default_homepage: '{{ dims_owf_url }}'

#dimscli_version: 0.26.0

dims_timezone: 'US/Pacific'
dims_locale: 'en_US.UTF-8'
dims_etcd2_reboot_strategy: 'off'

https_proxy: ''

# Bash automated testing system
bats_version: 'v0.4.0'

dnsmasq_version: '2.76'
dnsmasq_archive: 'dnsmasq-{{ dnsmasq_version }}.tar.gz'
dnsmasq_dist_url: 'http://thekelleys.org.uk/dnsmasq/dnsmasq-{{ dnsmasq_version }}.tar.gz'
dnsmasq_sha256_sum: '777c4762d2fee3738a0380401f2d087b47faa41db2317c60660d69ad10a76c32'


docker_listen_port: 2375
docker_api_port: 2376
docker_registry_port: 5000
docker_registry: hub.{{ ansible_domain }}:{{ docker_registry_port }}

# TODO(dittrich): This should be derived from (a) more global variable(s)
# e.g., docker_insecure_registry_net: '{{ networks["vlan1"].network }}/{{ networks["vlan1"].cidr_bits }}'
docker_insecure_registry_net: 192.168.56.0/24
docker_network_opts: ''
#docker_network_opts: |
  #  -ip={{ hostvars[inventory_hostname].net.iface[hostvars[inventory_hostname].zone_iface['docker']].ip }}
docker_opts: |
  -H=tcp://{{ dims_fqdn }}:{{ docker_api_port }}
  -H=unix:///var/run/docker.sock
  --log-driver json-file
  --log-opt max-size=10m
  --log-opt max-file=10
  --insecure-registry {{ docker_registry }}
  --insecure-registry {{ docker_insecure_registry_net }}

fail2ban_bantime: 3600 # one hour
fail2ban_destemail: 'root@{{ dims_fqdn }}'
fail2ban_findtime: 600 # 10 minutes
# Items in list can be IP address, CIDR block, or DNS entry
fail2ban_ignoreips:
  - '127.0.0.1/8'
fail2ban_logpath: '/var/log/dims/{{ dims_fqdn }}.log'
fail2ban_maxretry: 3
fail2ban_sendername: 'Fail2ban'
fail2ban_services:
  - name: 'ssh'
    port: 22
    filter: 'sshd'
    logpath: '{{ fail2ban_logpath }}'
    bantime: 86400 # one day
  - name: 'recidive'
    logpath: '{{ fail2ban_logpath }}'
    #bantime: 604800 # one week
    #findtime: 86400 # one day
    bantime: -1 # forever
    findtime: 604800 # one week
    maxretry: 3

go_version: '1.6.1'
go_archive: 'go{{ go_version }}.linux-amd64.tar.gz'
go_dist_url: 'https://storage.googleapis.com/golang/go{{ go_version }}.linux-amd64.tar.gz'
go_sha256_sum: '6d894da8b4ad3f7f6c295db0d73ccc3646bce630e1c43e662a0120681d47e988'

# Local settings for geerlingguy/nginx role

nginx_version: '1.6.2-5+deb8u3'
nginx_health_check_port: 8008
nginx_worker_processes: 4
nginx_default_port: 80
nginx_ssl_port: 443
nginx_default_domain: '{{ dims_fqdn }}'
nginx_webroot: '/var/www'

# For use by ansible-role-certbot (or nginx role)
certbot_auto_renew_options: "--quiet --no-self-upgrade"
certbot_auto_renew_user: ansible
certbot_auto_renew_minute: 20
certbot_auto_renew_hour: 5
certbot_install_from_source: yes
certbot_preferred_challenges: 'http'
certbot_repo: https://github.com/certbot/certbot.git
certbot_version: master
certbot_keep_updated: yes
#certbot_sitename: ''
certbot_adminemail: '{{ dims_adminemail }}'

# Read: http://www.opendkim.org/opendkim-README
opendkim_auto_restart: 'Yes'
opendkim_auto_restart_rate: '10/1h'
opendkim_canonicalization: 'relaxed/relaxed'
opendkim_mode: 'sv'
opendkim_daemon_opts: '-b {{ opendkim_mode }}'
opendkim_host: 'localhost'
opendkim_key_bits: 2048
opendkim_milters: 'inet:{{ opendkim_host }}:{{ opendkim_port }}'
opendkim_port: 12301
opendkim_requestreports: 'Yes'
opendkim_sendreports: '{{ opendkim_requestreports }}'
opendkim_signature_algorithm: 'rsa-sha256'
opendkim_socket: 'inet:{{ opendkim_port }}@{{ opendkim_host }}'
opendkim_subdomains: 'Yes'
opendkim_trustedhosts: '{{ groups.do }}'
opendkim_umask: '002'
opendkim_use_spf: true
# https://www.spfwizard.net/
opendkim_host_spf_txt: 'v=spf1 include:_spf.{{ dims_domain }} ~all'

postgresql_version: '9.4'
postgresql_pool: 'main'
postgresql_apt_key_id: '7FCC7D46ACCC4CF8'
postgresql_apt_key_url: 'https://www.postgresql.org/media/keys/ACCC4CF8.asc'

prisem_rpc_repo_url: 'https://github.com/davedittrich/prisem-rpc'
prisem_rpc_version: '1.1.1'
prisem_rpc_archive: 'prisem-rpc-{{ prisem_rpc_version }}.tar.gz'
prisem_rpc_dist_url: '{{ artifacts_url }}/{{ prisem_rpc_archive }}'

hashi_vault_scheme: 'https'
hashi_vault_listen_address: '0.0.0.0'
hashi_vault_listen_port: 8200
hashi_vault_addr: "{{ hashi_vault_scheme }}://{{ ansible_fqdn }}:{{ hashi_vault_listen_port }}"
hashi_vault_ssl_dir: '{{ dims_data }}/vault'
hashi_vault_ssl_fullchainfile: '{{ hashi_vault_ssl_dir }}/{{ letsencrypt_ssl_fullchainfile|basename }}'
hashi_vault_ssl_cacertfile: '{{ hashi_vault_ssl_dir }}/{{ letsencrypt_ssl_cacertfile|basename }}'
hashi_vault_ssl_certfile: '{{ hashi_vault_ssl_dir }}/{{ letsencrypt_ssl_certfile|basename }}'
hashi_vault_ssl_keyfile: '{{ hashi_vault_ssl_dir }}/{{ letsencrypt_ssl_keyfile|basename }}'

rabbitmq_tcp_listen_port: 5672
rabbitmq_ssl_listen_port: 5671
rabbitmq_use_ssl: true
rabbitmq_ssl_versions: "'tlsv1.2', 'tlsv1.1'"
rabbitmq_ssl_dir: '/etc/rabbitmq'
rabbitmq_ssl_cacertfile: '{{ rabbitmq_ssl_dir }}/{{ ssl_cacertfile|basename }}'
rabbitmq_ssl_certfile: '{{ rabbitmq_ssl_dir }}/{{ ssl_certfile|basename }}'
rabbitmq_ssl_keyfile: '{{ rabbitmq_ssl_dir }}/{{ ssl_keyfile|basename }}'
rabbitmq_ssl_verify: 'verify_peer' # or 'verify_none'
rabbitmq_ssl_fail_if_no_peer_cert: 'false'
rabbitmq_mgmt_listen_port: 15672
# http://www.dorm.org/blog/rabbitmq_management-listening-on-multiple-ports-it-cant-be-done/
rabbitmq_mgmt_uses_ssl: false
rabbitmq_server: '{{ groups.rabbitmq.0 }}'
rabbitmq_vhost: '/'
rabbitmq_default_user: 'rpc_user'
rabbitmq_admin_user: 'hutchman'
rabbitmq_exchange: ''
rabbitmq_logexchange: 'logs'
rabbitmq_queuebase: 'rpc'

rsyslog_user: syslog
rsyslog_server: '{{ hostvars["red"].ansible_host }}'
# Listen on port 6514
# If you want to use other port configure selinux
rsyslog_port: 6514
rsyslog_use_ssl: true
rsyslog_domains: [
    '.{{ dims_domain }}',
]
rsyslog_ssl_dir: '/etc/rsyslog'
rsyslog_ssl_cacertfile: '{{ rsyslog_ssl_dir }}/{{ ssl_cacertfile|basename }}'
rsyslog_ssl_certfile: '{{ rsyslog_ssl_dir }}/{{ ssl_certfile|basename }}'
rsyslog_ssl_keyfile: '{{ rsyslog_ssl_dir }}/{{ ssl_keyfile|basename }}'

#rsyslog_ignore_config:
#rsyslog_consolidation_config:

squidLogFile: '/var/log/squid.log'
squidContainerName: 'squid-proxy'
squidBasename: 'squid'

# The following are defined in relation to the ansible-role-ca
# self-signed certificate generation role. These are set to
# the standard general directories for Debian and RedHat. This
# allows one cert per host to be used for any service(s) that
# use SSL, as well as adding local CA and host certs to the
# SSL trust database. (Used for development.)

# ssl_certs_dir and ssl_key_dir are OS-specific and defined in vars/*.yml files.
ssl_cacertfile: '{{ ssl_certs_dir }}/ca.pem'
ssl_certfile: '{{ ssl_certs_dir }}/{{ dims_fqdn }}-cert.pem'
ssl_keyfile: '{{ ssl_key_dir }}/{{ dims_fqdn }}-priv-key.pem'
ssl_dhparam_file: '/etc/ssl/certs/dhparam.pem'
ssl_dhparam_keysize: '2048'

letsencrypt_ssl_cacertfile: '/etc/letsencrypt/live/{{ dims_fqdn }}/chain.pem'
letsencrypt_ssl_fullchainfile: '/etc/letsencrypt/live/{{ dims_fqdn }}/fullchain.pem'
letsencrypt_ssl_certfile: '/etc/letsencrypt/live/{{ dims_fqdn }}/cert.pem'
letsencrypt_ssl_keyfile: '/etc/letsencrypt/live/{{ dims_fqdn }}/privkey.pem'

trident_version: '1.4.6'
trident_repo_branch: 'DEV_1.4.6-RC2'
pitchfork_repo_branch: '{{ trident_version }}'

swarm:
  service_delay_seconds: 30
  services:
    viz:
      nets: []
      ports: [
        {
          host: 9090,
          client: 8080
        },
      ]
      limit_cpu: 0.5
      env_vars: [
        {
          name: 'PORT',
          value: 9090
        },
      ]
      constraints: [
        'node.role == manager',
      ]
      mounts: [
        '/var/run/docker.sock:/var/run/docker.sock',
      ]
      image_name: 'manomarks/visualizer'
      replicas: 1

# vim: ft=ansible :
