---

# File: inventory/do/nodes.yml

# Make sure the following environment variables are set:
# export DO_API_VERSION="2"
# export DO_API_TOKEN="$YOUR_DO_API_TOKEN"

do:
  vars:
    ansible_user: 'root'
    ansible_port: 22
    ansible_ssh_private_key_file: '{{ lookup("env", "TF_VAR_private_key_file") }}'
    artifacts_url: ''
    _public_key: '{{ ansible_ssh_private_key_file }}.pub'
    http_proxy: ''
    https_proxy: ''
    certbot_staging: yes
    certbot_sitename: '{{ dims_fqdn }}'
    certbot_backup_dir: '{{ dims_backups }}/{{ dims_fqdn }}'
    certbot_backup_restorefrom: 'latest'
    certbot_save_backups: yes
    dims_secrets_dir: '{{ lookup("psec", "environments path") }}'
    dims_keys: '{{ dims_secrets_dir }}/keys'
    dims_backups: '{{ dims_secrets_dir }}/backups'
    do_api_token: '{{ lookup("psec", "secrets get do_api_token") }}'
    do_droplets:
      - name: 'red'
        region: '{{ do_region }}'
        size: '1gb'
        image_id: 'debian-9-x64'
        ssh_key_id: '{{ do_ssh_key_id }}'
        backups_enabled: 'no'
        module_source: 'floating_ip'
        floating_ip: 'yes'
      - name: 'green'
        region: '{{ do_region }}'
        size: '4gb'
        image_id: 'debian-9-x64'
        ssh_key_id: '{{ do_ssh_key_id }}'
        backups_enabled: 'no'
      - name: 'black'
        region: '{{ do_region }}'
        size: '1gb'
        image_id: 'debian-9-x64'
        ssh_key_id: '{{ do_ssh_key_id }}'
        backups_enabled: 'no'
      - name: 'purple'
        region: '{{ do_region }}'
        size: '1gb'
        image_id: 'debian-9-x64'
        ssh_key_id: '{{ do_ssh_key_id }}'
        backups_enabled: 'no'
      - name: 'blue'
        region: '{{ do_region }}'
        size: '1gb'
        image_id: 'centos-7-x64'
        #image_id: 'fedora-27-x64'
        ssh_key_id: '{{ do_ssh_key_id }}'
        backups_enabled: 'no'
    do_manage_etc_hosts: false
    do_preserve_hostname: true
    do_region: '{{ lookup("psec", "secrets get do_region") }}'
    do_ssh_key_id: '{{ lookup("psec", "secrets get do_ssh_key_id") }}'
    dns_a_ttl: 360
    dns_cname:
      red:
        - mail
        - rabbitmq
      green:
        - jenkins
      purple:
        - trident
      black:
        - vault
      blue:
        - vpn
    dns_cname_ttl: 360
    dns_subdomains: '' # e.g., '.subdomain'
    dns_txt:
      # https://scaron.info/blog/debian-mail-spf-dkim.html
      - name: '_dmarc'
        value: 'v=DMARC1; p=none'
      # http://opendkim.org/opendkim-README
      - name: '_report._domainkey'
        value: 'ra=root'
      # https://app.dmarcanalyzer.com/dns/dkim?simple=1
      - name: '{{ opendkim_selector }}._domainkey'
        value: '{{ lookup("dkim_txt_record", dims_keys + "/opendkim/" + dims_domain + "/" + opendkim_selector + ".txt") }}'
      # https://www.spfwizard.net/
      - name: '_spf'
        #value: 'v=spf1 mx ptr ip4:{{ hostvars["red"].ansible_default_ipv4.address|ipaddr("host") }} ip4:{{ hostvars["green"].ansible_default_ipv4.address|ipaddr("host") }} ip4:{{ hostvars["purple"].ansible_default_ipv4.address|ipaddr("host") }} ~all'
        value: 'v=spf1 mx a ptr ~all'
      - name: '@'
        value: 'v=spf1 include:_spf.{{ dims_domain }} ~all'
    dns_txt_ttl: 360
    dns_mx:
      - name: '_spf'
        value: '{{ hostvars[groups.postfix_mx.0].dims_fqdn|default("mail" + dims_domain) }}'
        priority: 10
      - name: '@'
        value: '{{ hostvars[groups.postfix_mx.0].dims_fqdn|default("mail" + dims_domain) }}'
        priority: 10
    dns_mx_ttl: 360
    opendkim_selector: '{{ lookup("psec", "secrets get opendkim_selector") }}'
    # Custom rules for default networks
    # (NOTE: Hard-coded device names. Must match above.)
    zone_iface:
      swarm: 'eth0'
      docker: 'eth0'
      consul: 'eth0'
      rabbitmq: 'eth0'
      private_network: 'eth0'
    net:
      iface:
        'eth0':
          inet: 'static'
          auto_config: ''
          ip: '{{ ansible_host }}'
          network: ''
          netmask: ''
          cidr_bits: ''
          broadcast: ''
          dns_search: '{{ deployment }}'
          dns_servers: ''
          vagrant_net: 'private_network'
    use_letsencrypt: yes
  hosts:
    'red':
      custom_rules: [
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_default_port }} -j ACCEPT',
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_ssl_port }} -j ACCEPT',
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ rabbitmq_ssl_listen_port }} -j ACCEPT',
        ]
    'blue':
      epel_repo_url: 'http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm'
    'green':
      trident_fqdn: '{{ dims_fqdn }}'
      custom_rules: [
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_default_port }} -j ACCEPT',
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_ssl_port }} -j ACCEPT',
        ]
    'purple':
      trident_fqdn: '{{ dims_fqdn }}'
      custom_rules: [
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_default_port }} -j ACCEPT',
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_ssl_port }} -j ACCEPT',
        ]
    'black':
      hashi_vault_key_shares: 1
      hashi_vault_key_threshold: 1
      hashi_vault_mode: 'simple'
      custom_rules: [
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_default_port }} -j ACCEPT',
        '-A TCP -m conntrack --ctstate NEW -m tcp -p tcp --dport {{ nginx_ssl_port }} -j ACCEPT',
        ]

# vim: ft=ansible :
