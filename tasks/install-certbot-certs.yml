---

# File: tasks/install-certbot-certs.yml

# This task ensures that a letsencrypt certificate is in
# /etc/letsencrypt/ and that certbot-auto is ready to
# renew it. Because there is throttling of certificate generation
# that limits the number of certificates for a unique domain name
# to a small handful per week, a backup file is generated in
# the DIMS "private" directory for the deployment and a fresh
# Vagrant will be set up with this backup certificate rather
# than always generating a new one. Be aware of this limitation.

- fail: msg="use_letsencrypt is not enabled"
  when: use_letsencrypt is not defined or not use_letsencrypt|bool

- name: Define certbot_sitename
  set_fact:
    certbot_sitename: '{{ ansible_fqdn }}'
  when: certbot_sitename is not defined

- name: Define certbot_adminemail
  set_fact:
    certbot_adminemail: '{{ root_user }}@{{ ansible_fqdn }}'
  when: certbot_adminemail is not defined

- name: Default certbot_save_backups false
  set_fact:
    certbot_save_backups: false
  when: certbot_save_backups is not defined

  # When certbot_backup_restorefrom is defined and set to
  # a file path, see if the file exists.
- block:
  - name: stat {{ certbot_backup_restorefrom }}
    stat: path='{{ certbot_backup_restorefrom }}'
    delegate_to: 127.0.0.1
    when: certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom != "latest"
    register: _backup_stat

  - name: Set certbot_backup_dir
    set_fact:
      _backup_dir: '{{ _backup_stat.stat.path|dirname }}'
    when: certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom != "latest"

  - name: Set certbot_backup_file
    set_fact:
      _backup_file: '{{ _backup_stat.stat.path|basename }}'
    when: certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom != "latest"

  - name: Note success in locating backup
    set_fact:
      _restorefrom_exists: true

  rescue:
  - name: Note failure in locating backup
    set_fact:
      _restorefrom_exists: false

  # endblock

  # When certbot_backup_restorefrom is defined and set to
  # "latest", find the latest available backup in
  # certbot_backup_dir. Note that the backup is named
  # "letsencrypt" for the /etc/letsencrypt directory, not
  # "certbot".

- block:
  - name: Define _default_backups_dir
    set_fact:
      _default_backups_dir: '{{ dims_backups }}/{{ ansible_fqdn }}'
    when: certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom == "latest"

  - include: '{{ tasks_path }}/get_backups.yml'
    vars:
      backups_dir: '{{ certbot_backup_dir|default(_default_backups_dir) }}'
      backups_service: 'letsencrypt'
    when: certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom == "latest"

  - name: Set _backup_dir from latest backup file
    set_fact:
      _backup_dir: '{{ backups_files.0|dirname }}'
    when: backups_files is defined and
          certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom == "latest"

  - name: Set _backup_file from latest backup file
    set_fact:
      _backup_file: '{{ backups_files.0|basename }}'
    when: backups_files is defined and
          certbot_backup_restorefrom is defined and
          certbot_backup_restorefrom == "latest"

  - name: Note success in locating backup
    set_fact:
      _restorefrom_exists: true

  rescue:
  - name: Note failure in locating backup
    set_fact:
      _restorefrom_exists: false

  # endblock

- debug: msg="Failed to set _backup_dir and _backup_file"
  when: certbot_backup_restorefrom is defined and
        not (_backup_dir is defined and _backup_file is defined)

  # If _backup_dir and _backup_file are set at this point,
  # we are ready to restore from backup.

- block:
  - name: Restore certs from backup
    unarchive:
      src: '{{ _backup_dir }}/{{ _backup_file }}'
      dest: /etc
      extra_opts: '--exclude=var'
    when: certbot_backup_restorefrom is defined and
          (_backup_dir is defined and _backup_file is defined)

  - name: Note success in restoring
    set_fact:
      _restored: true
    when: certbot_backup_restorefrom is defined and
          (_backup_dir is defined and _backup_file is defined)

  rescue:
  - name: Note failure in restoring
    set_fact:
      _restored: false

  always:
  - name: Note failure in restoring
    set_fact:
      _restored: false
    when: not (certbot_backup_restorefrom is defined and
          (_backup_dir is defined and _backup_file is defined))

  # endblock

  # At this point, _restored reflects whether we successfully
  # restored from backup or not.  If not, and there are no
  # certs present, attempt to generate new certs and save
  # results in _generated.

- block:
  - include: '{{ tasks_path }}/letsencrypt_generate.yml'
    when: use_letsencrypt and not _restored

  - name: Note success in generating
    set_fact:
      _generated: true

  rescue:
  - name: Note failure in generating
    set_fact:
      _generated: false

  # endblock

- name: Check for existence of letsencrypt cert
  stat:
    path: '/etc/letsencrypt/live/{{ certbot_sitename }}/cert.pem'
  register: _cert_stat

- name: Define _have_cert
  set_fact:
    _have_cert: '{{ _cert_stat.stat is defined and
                    _cert_stat.stat.exists|bool }}'

- debug:
    msg: '_have_cert is {{ _have_cert }}'

- include: '{{ tasks_path }}/letsencrypt_generate.yml'
  when: use_letsencrypt and not _have_cert

  # 'certbot-auto renew' will always return 0 if it does
  # not fail, regardless of whether a new certificate resulted
  # or not. Adding a --post-hook is required to get it to
  # return some value. A simpler solution here is to create
  # a marker file in /etc/letsencrypt and looking to see if any
  # files were changed as a result of the renew operation.
  # See https://certbot.eff.org/docs/using.html

- block:
  - name: Update cert
    shell: >
      touch /etc/letsencrypt/.certbot-auto-renew &&
      /opt/certbot/certbot-auto
      renew
      --quiet
      --no-self-upgrade
    register: _update_results
    when: use_letsencrypt and _have_cert

  - fail: msg="Failed to run certbot-auto"
    when: _update_results is not defined or _update_results.rc|int != 0

  - name: Check for new files
    shell: >
      find
      /etc/letsencrypt/*
      -newer /etc/letsencrypt/.certbot-auto-renew | wc -l
    register: _find_results

  - name: Note cert changed
    set_fact:
      _cert_changed: true
    when: _find_results.stdout|int > 0

  - name: Note cert not changed
    set_fact:
      _cert_changed: false
    when: _find_results.stdout|int == 0

  rescue:
  - name: Note cert not changed
    set_fact:
      _cert_changed: false

  # Finally, backup cert if so desired (and if something
  # changed in renewal)

- include: '{{ tasks_path }}/letsencrypt_backup.yml'
  when: use_letsencrypt and
        certbot_save_backups|bool and
        _cert_changed

# vim: ft=ansible :
