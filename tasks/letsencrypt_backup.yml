---

# File: tasks/letsencrypt_backup.yml

# Requires:
# certbot_backup_dir - Directory to store backup (defaults to
#                      directory using dims_fqdn in path)

- name: Assert dims_fqdn is defined and not null
  assert:
    that:
      - dims_fqdn is defined
      - dims_fqdn != ''

- name: Identify user running ansible-playbook
  local_action: command whoami
  register: _localuser

- debug:
    var: _localuser
    verbosity: 2

- name: Define backups_owner
  set_fact:
    backups_owner: '{{ _localuser.stdout }}'
  when: backups_owner is not defined

- name: Define backups_group
  set_fact:
    backups_group: '{{ backups_owner }}'
  when: backups_group is not defined

- name: Define _default_backups_dir
  set_fact:
    certbot_backup_dir: '{{ dims_backups }}/{{ dims_fqdn }}'
  when: certbot_backup_dir is not defined

- block:
  - name: Create temporary directory for cert backup
    shell: >
      mktemp -d '{{ ansible_env["TMPDIR"] | default("/tmp", true) }}/ansible.XXXX'
    register: mktemp_output
    become: yes

  - name: Define _tmpdir variable
    set_fact:
      _tmpdir: '{{ mktemp_output.stdout }}'

  - name: Define backup_ts timestamp
    set_fact:
      _backup_ts: "{{ lookup('pipe', 'date +%FT%T%Z') }}"

  # Note that the backup is named "letsencrypt" for the
  # /etc/letsencrypt directory, not "certbot". Be aware of
  # tight coupling of this name in other tasks.

  - name: Define certbot_backup_file
    set_fact:
      certbot_backup_file: 'letsencrypt_{{ _backup_ts }}.tgz'

  - name: Create backup of letsencrypt certificates
    archive:
      path: '/etc/letsencrypt'
      dest: '{{ _tmpdir }}/{{ certbot_backup_file }}'
      owner: root
      group: root
      mode: 0o770
      remove: false
    become: yes

  - name: Ensure local cert directory exists
    file:
      dest: '{{ certbot_backup_dir }}'
      state: directory
      owner: '{{ backups_owner }}'
      group: '{{ backups_group }}'
      mode: 0o770
    delegate_to: 127.0.0.1
    become: '{{ (backups_owner == _localuser)|ternary("no","yes") }}'
    become_user: '{{ backups_owner }}'

  - name: Fetch backup copy of letsencrypt directory
    fetch:
      src: '{{ _tmpdir }}/{{ certbot_backup_file }}'
      dest: '{{ certbot_backup_dir }}/{{ certbot_backup_file }}'
      flat: true
      validate_checksum: yes
    no_log: '{{ no_log|default(true) }}'
    become: '{{ (backups_owner == _localuser)|ternary("no","yes") }}'

  - name: Note success in backing up certs
    set_fact:
      _backedup: true

  - name: Set backup ownership
    file:
      path: '{{ certbot_backup_dir }}/{{ certbot_backup_file }}'
      owner: '{{ backups_owner }}'
      group: '{{ backups_group }}'
      mode: 0o660
    delegate_to: 127.0.0.1
    become: '{{ (backups_owner == _localuser)|ternary("no","yes") }}'
    become_user: '{{ backups_owner }}'

  rescue:
  - name: Note failure in backing up certs
    set_fact:
      _backedup: false

  # endblock

- name: Remove temporary directory
  file:
    path: '{{ _tmpdir }}'
    state: absent
  become: yes
  when: _backedup

- fail: msg="Backup failed. Temporary directory {{ _tmpdir }} preserved."
  when: not _backedup

# vim: ft=ansible :
