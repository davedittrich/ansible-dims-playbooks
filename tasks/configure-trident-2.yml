---

# File: tasks/configure-trident-2.yml

# NOTE(mboggess):
# Things to do still:
#  - make trust group check actual existence check
#  - make sure any list vars are defined as null
#    if they're 'set_fact' definitions were made
#    from shell commands that can return nothing.
#    see 'members_current' for an example
#  - the last task sets system sysadmin rights and
#    and group admin rights but there is currently
#    no way to check if a user is sysadmin/group
#    admin. That may be coming in a future version.
#  - there's lots of repetition of updating vars
#    like 'members_current' and 'users_current' to
#    make sure the latest lists are available before
#    tasks manipulate the Trident system based on
#    those lists. I still need to make sure these
#    updates are a) not proliferated beyond where
#    they are actually needed and b) are in places
#    where they are actually needed.

- name: Load deployment secrets
  include_vars: "{{ inventory_dir }}/group_vars/vault_{{ deployment }}.yml"
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"

# Log in to tcli
- name: Ensure administator is logged in
  shell: >
    tcli system login trident {{ tridentSysAdminPass }} | grep -q "Login successful"
  register: tcli_login
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"

- fail: "Failed to log in via trident: {{ tcli_login.stdout }}"
  when:
    - ansible_lsb.codename == "jessie"
    - tcli_login.rc != 0

- name: Ensure administrator logged in with sysadmin rights
  shell: >
    tcli system swapadmin | grep -q "Now a SysAdmin user"
  register: tcli_swapadmin
  no_log: '{{ nolog }}'
  when: ansible_lsb.codename == "jessie"

- fail: "Failed to obtain sysadmin rights: {{ tcli_swapadmin.stdout }}"
  when:
    - ansible_lsb.codename == "jessie"
    - tcli_swapadmin.rc != 0

# Determine tg existence
# This is not quite 'existence' check. Should be using
# the 'rc' key/value from the 'results' variable. On
# the todo list
- name: Determine if primary_tg exists
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} list | grep "^{{ trident.primary_tg.ident }}" | awk '{ print $1; }'
  register: result

- name: Define primary_tg existence variable
  set_fact:
    trust_group: "{{ result.stdout }}"

# Determine current members
- name: Determine current members of primary_tg
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current members
  set_fact:
    members_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current members if undefined
  set_fact:
    members_current: "{{ members_current|default([]) }}"
  when: members_current is undefined

# Determine current users list
- name: Define list of current users
  shell: >
    tcli user view {{ item.ident }} | head -n 1 | awk '{ print $2; }'
  with_items: "{{ trident.primary_tg.members }}"
  register: results

- name: Extract list of current users
  set_fact:
    users_current: "{{ results.results | map(attribute='stdout') | list }}"

- name: Define empty list of current users if undefined
  set_fact:
    members_current: "{{ users_current|default([]) }}"
  when: users_current is undefined

# Add new members to Trident/trust group
- name: Setup new members to Trident/trust group
  shell: >
    tcli user new {{ item.ident }} {{ item.email }} &&
    tcli user set descr {{ item.ident }} '{{ item.descr }}' &&
    tcli user email confirm_force {{ item.ident }} {{ item.email }} &&
    tcli {{ tcli[trident.version]['tg_SUB'] }} member {{ tcli[trident.version]['addmem'] }} {{ trident.primary_tg.ident }} item.ident &&
    tcli {{ tcli[trident.version]['tg_SUB'] }} member approve {{ trident.primary_tg.ident }} item.ident
  with_items: "{{ trident.primary_tg.members }}"
  when:
    - trust_group == trident.primary_tg.ident
    - item.ident not in members_current
    - item.ident not in users_current

# Update current members list
- name: Determine current members of primary_tg
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current members
  set_fact:
    members_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current members if undefined
  set_fact:
    members_current: "{{ members_current|default([]) }}"
  when: members_current is undefined

# Update current users list
- name: Define list of current users
  shell: >
    tcli user view {{ item.ident }} | head -n 1 | awk '{ print $2; }'
  with_items: "{{ trident.primary_tg.members }}"
  register: results

- name: Extract list of current users
  set_fact:
    users_current: "{{ results.results | map(attribute='stdout') | list }}"

- name: Define empty list of current users if undefined
  set_fact:
    members_current: "{{ users_current|default([]) }}"
  when: users_current is undefined

- name: Remove old members
  shell: >
    tcli user delete {{ item }}
  with_items: "{{ users_current }}"
  when:
    - trust_group == trident.primary_tg.ident
    - item not in members_current
    - item != 'trident'

# Update current members list
- name: Determine current members of primary_tg
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current members
  set_fact:
    members_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current members if undefined
  set_fact:
    members_current: "{{ members_current|default([]) }}"
  when: members_current is undefined

# Update current users list
- name: Define list of current users
  shell: >
    tcli user view {{ item.ident }} | head -n 1 | awk '{ print $2; }'
  with_items: "{{ trident.primary_tg.members }}"
  register: results

- name: Extract list of current users
  set_fact:
    users_current: "{{ results.results | map(attribute='stdout') | list }}"

- name: Define empty list of current users if undefined
  set_fact:
    members_current: "{{ users_current|default([]) }}"
  when: users_current is undefined

# If trust group doesn't exist, starting from
# scratch, so should just add all the defined
# members, tgs, mls.
- name: Add setup all new users
  shell: >
    tcli user new {{ item.ident }} {{ item.email }} &&
    tcli user set descr {{ item.ident }} '{{ item.descr }}' &&
    tcli user email confirm_force {{ item.ident }} {{ item.email }}
  with_items: "{{ trident.primary_tg.members }}"
  when:
    - trust_group != trident.primary_tg.ident
    - item.ident not in members_current
    - item.ident not in users_current

- name: Add trust group
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} add {{ trident.primary_tg.ident }} &&
    tcli {{ tcli[trident.version]['tg_SUB'] }} set descr {{ trident.primary_tg.ident }} '{{ trident.primary_tg.descr }}'
  when:
    - trust_group != trident.primary_tg.ident

# Update current members list
- name: Determine current members of primary_tg
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current members
  set_fact:
    members_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current members if undefined
  set_fact:
    members_current: "{{ members_current|default([]) }}"
  when: members_current is undefined

- name: Add all members to trust group
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member {{ tcli[trident.version]['addmem'] }} {{ trident.primary_tg.ident }} {{ item.ident }} &&
    tcli {{ tcli[trident.version]['tg_SUB'] }} member approve {{ trident.primary_tg.ident }} {{ item.ident }}
  with_items: "{{ trident.primary_tg.members }}"
  when: 
    - trust_group != trident.primary_tg.ident
    - item.ident not in members_current

# Determine set of defined mailing lists
- name: Define known set of mailing lists
  set_fact:
    lists_defined: "{{ trident.primary_tg.mailing_lists | map(attribute='ident') | list }}"

# Determine current set of mailing lists
- name: Determine current mailing lists of primary_tg
  shell: >
    tcli ml list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current ml of primary_tg
  set_fact:
    lists_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current mailing lists if undefined
  set_fact:
    lists_current: "{{ lists_current|default([]) }}"
  when: lists_current is undefined

- name: Add new mailing lists
  shell: >
    tcli ml new {{ trident.primary_tg.ident }} {{ item.ident }} &&
    tcli ml set descr {{ trident.primary_tg.ident }} {{ item.ident }} '{{ item.descr }}'
  with_items: "{{ trident.primary_tg.mailing_lists }}"
  when: item.ident not in lists_current
  
# Update current set of mailing lists
- name: Determine current mailing lists of primary_tg
  shell: >
    tcli ml list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current mailing lists of primary_tg
  set_fact:
    lists_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current mailing lists if undefined
  set_fact:
    lists_current: "{{ lists_current|default([]) }}"
  when: lists_current is undefined

- name: Remove old mailing lists
  shell: >
    tcli ml remove {{ trident.primary_tg.ident }} {{ item.ident }}
  with_items: "{{ lists_current }}"
  when: item not in lists_defined

# Update current set of mailing lists
- name: Determine current mailing lists of primary_tg
  shell: >
    tcli ml list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current mailing lists of primary_tg
  set_fact:
    lists_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current mailing lists if undefined
  set_fact:
    lists_current: "{{ lists_current|default([]) }}"
  when: lists_current is undefined

# Update current members list
- name: Determine current members of primary_tg
  shell: >
    tcli {{ tcli[trident.version]['tg_SUB'] }} member list {{ trident.primary_tg.ident }} | awk '{ print $1; }'
  register: results
  when: trust_group == trident.primary_tg.ident

- name: Extract list of current members
  set_fact:
    members_current: "{{ results.stdout_lines }}"
  when: trust_group == trident.primary_tg.ident

- name: Define empty list of current members if undefined
  set_fact:
    members_current: "{{ members_current|default([]) }}"
  when: members_current is undefined

# Determine set of defined members
- name: Define known set of members
  set_fact:
    members_defined: "{{ trident.primary_tg.members | map(attribute='ident') | list }}"

# Determine members of lists
- name: Determine members of lists
  shell: >
    tcli ml member list {{ trident.primary_tg.ident }} {{ item.ident }}
  with_items: "{{ trident.primary_tg.mailing_lists }}"
  register: results

- name: Extract data structure of lists with members
  set_fact:
    lists_members: "{{ lists_members|default([]) + [{ 'list': item.item.ident, 'members': item.stdout_lines }] }}"
  with_items: "{{ results.results }}"

- name: Add all members to all non-admin mailing lists
  shell: >
    tcli ml member add {{ trident.primary_tg.ident }} {{ item[0].list }} {{ item[1] }}
  with_nested:
    - "{{ lists_members }}"
    - "{{ members_current }}"
  when:
    - item[0].list != "admin"
    - item[1] not in item[0].members
    - item[1] in members_defined

# Update members of lists
- name: Determine members of lists
  shell: >
    tcli ml member list {{ trident.primary_tg.ident }} {{ item.ident }}
  with_items: "{{ trident.primary_tg.mailing_lists }}"
  register: results

- name: Extract data structure of lists with members
  set_fact:
    lists_members: "{{ lists_members|default([]) + [{ 'list': item.item.ident, 'members': item.stdout_lines }] }}"
  with_items: "{{ results.results }}"

- name: Remove non-members from all non-admin mailing lists
  shell: >
    tcli ml member remove {{ trident.primary_tg.ident }} {{ item[0].list }} {{ item[1] }}
  with_nested:
    - "{{ lists_members }}"
    - "{{ members_current }}"
  when:
    - item[0].list != 'admin'
    - item[1] != 'trident'
    - item[1] not in members_defined

# Determine set of defined admins
- name: Create set of defined admins
  set_fact:
    admins_defined: "{{ trident.admins | map(attribute='ident') | list }}"

# Extract admin mailing list members
- name: Extract admin mailing list members
  set_fact:
    admin_list_members: "{{ item.members }}"
  with_items: "{{ lists_members }}"
  when: item.list == 'admin'

- name: Add all admins to admin mailing list
  shell: >
    tcli ml member add {{ trident.primary_tg.ident }} admin {{ item.ident }}
  with_items: "{{ trident.admins }}"
  when:
    - item.ident not in admin_list_members

- name: Remove old admins from admin mailing list
  shell: >
    tcli ml member remove {{ trident.primary_tg.ident }} admin {{ item }}
  with_items: "{{ admin_list_members }}"
  when: item not in admins_defined

- name: Give admins sysadmin/tg admin rights
  shell: >
    tcli user set sysadmin {{ item.ident }} true &&
    tcli {{ tcli[trident.version]['tg_SUB'] }} member promote {{ trident.primary_tg.ident }} {{ item.ident }}
  with_items: "{{ trident.admins }}"
  when: item.ident in members_current
        
# EOF
